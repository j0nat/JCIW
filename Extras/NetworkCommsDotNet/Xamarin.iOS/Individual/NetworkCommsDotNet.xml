<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkCommsDotNet</name>
    </assembly>
    <members>
        <member name="T:NetworkCommsDotNet.ConnectionState">
            <summary>
            Describes the current state of the connection
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.ConnectionState.Undefined">
            <summary>
            The state of this connection is undefined. This is the starting state of new connections.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.ConnectionState.Establishing">
            <summary>
            The connection is in the process of being established/initialised.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.ConnectionState.Established">
            <summary>
            The connection has been successfully established.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.ConnectionState.Shutdown">
            <summary>
            The connection has been shutdown.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.ConnectionInfo">
            <summary>
            Contains any information related to the configuration of a <see cref="T:NetworkCommsDotNet.Connections.Connection" /> object.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionType">
            <summary>
            The type of this connection
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifierStr">
            <summary>
            We store our unique peer identifier as a string so that it can be easily serialised.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.IsConnectable">
            <summary>
            True if the <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> is connectable.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionCreationTime">
            <summary>
            The DateTime corresponding to the creation time of this connection object
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ServerSide">
            <summary>
            True if connection was originally established by remote
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionListener">
            <summary>
            If this connection is <see cref="P:NetworkCommsDotNet.ConnectionInfo.ServerSide" /> references the listener that was used.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionEstablishedTime">
            <summary>
            The DateTime corresponding to the creation time of this connection object
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.LocalEndPoint">
            <summary>
            The <see cref="T:System.Net.EndPoint" /> corresponding to the local end of this connection.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint">
            <summary>
            The <see cref="T:System.Net.EndPoint" /> corresponding to the local end of this connection.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionState">
            <summary>
            Describes the current state of the connection
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier">
            <summary>
            Returns the networkIdentifier of this peer as a ShortGuid. If the NetworkIdentifier has not yet been set returns ShortGuid.Empty.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.LastTrafficTime">
            <summary>
            The DateTime corresponding to the time data was sent or received
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.ApplicationLayerProtocol">
            <summary>
            If enabled NetworkComms.Net uses a custom application layer protocol to provide
            useful features such as inline serialisation, transparent packet transmission,
            remote peer information etc. Default: ApplicationLayerProtocolStatus.Enabled
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.LocalIPEndPoint">
            <summary>
            The localEndPoint cast as <see cref="T:System.Net.IPEndPoint" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.ConnectionInfo.RemoteIPEndPoint">
            <summary>
            The remoteEndPoint cast as <see cref="T:System.Net.IPEndPoint" />.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor">
            <summary>
            Private constructor required for deserialisation.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.Net.EndPoint)">
            <summary>
            Create a new ConnectionInfo object pointing at the provided remote <see cref="T:System.Net.IPEndPoint" />.
            Uses the custom NetworkComms.Net application layer protocol.
            </summary>
            <param name="remoteEndPoint">The end point corresponding with the remote target</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.Net.EndPoint,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Create a new ConnectionInfo object pointing at the provided remote <see cref="T:System.Net.IPEndPoint" /></summary>
            <param name="remoteEndPoint">The end point corresponding with the remote target</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.String,System.Int32)">
            <summary>
            Create a new ConnectionInfo object pointing at the provided remote ipAddress and port.
            Provided ipAddress and port are parsed in to <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" />. Uses the
            custom NetworkComms.Net application layer protocol.
            </summary>
            <param name="remoteIPAddress">IP address of the remote target in string format, e.g. "192.168.0.1"</param>
            <param name="remotePort">The available port of the remote target.
            Valid ports are 1 through 65535. Port numbers less than 256 are reserved for well-known services (like HTTP on port 80) and port numbers less than 1024 generally require admin access</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.String,System.Int32,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Create a new ConnectionInfo object pointing at the provided remote ipAddress and port.
            Provided ipAddress and port are parsed in to <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" />.
            </summary>
            <param name="remoteIPAddress">IP address of the remote target in string format, e.g. "192.168.0.1"</param>
            <param name="remotePort">The available port of the remote target.
            Valid ports are 1 through 65535. Port numbers less than 256 are reserved for well-known services (like HTTP on port 80) and port numbers less than 1024 generally require admin access</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Tools.ShortGuid,System.Net.EndPoint,System.Boolean)">
            <summary>
            Create a connectionInfo object which can be used to inform a remote peer of local connectivity.
            Uses the custom NetworkComms.Net application layer protocol.
            </summary>
            <param name="connectionType">The type of connection</param>
            <param name="localNetworkIdentifier">The local network identifier</param>
            <param name="localEndPoint">The localEndPoint which should be referenced remotely</param>
            <param name="isConnectable">True if connectable on provided localEndPoint</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Tools.ShortGuid,System.Net.EndPoint,System.Boolean,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Create a connectionInfo object which can be used to inform a remote peer of local connectivity
            </summary>
            <param name="connectionType">The type of connection</param>
            <param name="localNetworkIdentifier">The local network identifier</param>
            <param name="localEndPoint">The localEndPoint which should be referenced remotely</param>
            <param name="isConnectable">True if connectable on provided localEndPoint</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(NetworkCommsDotNet.Connections.ConnectionType,System.Net.EndPoint,System.Net.EndPoint,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus,NetworkCommsDotNet.Connections.ConnectionListenerBase)">
            <summary>
            Create a connectionInfo object for a new connection.
            </summary>
            <param name="connectionType">The type of connection</param>
            <param name="remoteEndPoint">The remoteEndPoint of this connection</param>
            <param name="localEndPoint">The localEndpoint of this connection</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
            <param name="connectionListener">The listener associated with this connection if server side</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteStartConnectionEstablish">
            <summary>
            Marks the connection as establishing
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteCompleteConnectionEstablish">
            <summary>
            Set this connectionInfo as established.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteConnectionShutdown">
            <summary>
            Note this connection as shutdown
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateLocalEndPointInfo(System.Net.EndPoint)">
            <summary>
            Update the localEndPoint information for this connection
            </summary>
            <param name="localEndPoint">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateInfoAfterRemoteHandshake(NetworkCommsDotNet.ConnectionInfo,System.Net.EndPoint)">
            <summary>
            During a connection handShake we might be provided with more update information regarding endPoints, connectability and identifiers
            </summary>
            <param name="handshakeInfo">
                <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> provided by remoteEndPoint during connection handshake.</param>
            <param name="remoteEndPoint">The correct remoteEndPoint of this connection.</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateLastTrafficTime">
            <summary>
            Updates the last traffic time for this connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.ResetNetworkIdentifer(NetworkCommsDotNet.Tools.ShortGuid)">
            <summary>
            Replaces the current networkIdentifier with that provided
            </summary>
            <param name="networkIdentifier">The new networkIdentifier for this connectionInfo</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.ResetConnectionInfo">
            <summary>
            A connectionInfo object may be used across multiple connection sessions, i.e. due to a possible timeout.
            This method resets the state of the connectionInfo object so that it may be reused.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> object with obj and returns true if obj is ConnectionInfo and both
            the <see cref="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier" /> and <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> match.
            </summary>
            <param name="obj">The object to test of equality</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.Equals(NetworkCommsDotNet.ConnectionInfo)">
            <summary>
            Compares this <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> object with other and returns true if both the <see cref="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier" />
            and <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> match.
            </summary>
            <param name="other">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.op_Equality(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.ConnectionInfo)">
            <summary>
            Returns left.Equals(right)
            </summary>
            <param name="left">Left connectionInfo</param>
            <param name="right">Right connectionInfo</param>
            <returns>True if both are equal, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.op_Inequality(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.ConnectionInfo)">
            <summary>
            Returns !left.Equals(right)
            </summary>
            <param name="left">Left connectionInfo</param>
            <param name="right">Right connectionInfo</param>
            <returns>True if both are different, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.GetHashCode">
            <summary>
            Returns NetworkIdentifier.GetHashCode() ^ RemoteEndPoint.GetHashCode();
            </summary>
            <returns>The hashcode for this connection info</returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.ToString">
            <summary>
            Returns a string containing suitable information about this connection
            </summary>
            <returns>A string containing suitable information about this connection</returns>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.Serialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.Deserialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionInfo.Deserialize(System.IO.MemoryStream,NetworkCommsDotNet.ConnectionInfo@)">
            <summary>
            Deserializes from a memory stream to a <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> object
            </summary>
            <param name="ms">The memory stream containing the serialized <see cref="T:NetworkCommsDotNet.ConnectionInfo" /></param>
            <param name="result">The deserialized <see cref="T:NetworkCommsDotNet.ConnectionInfo" /></param>
        </member>
        <member name="T:NetworkCommsDotNet.CommsException">
            <summary>
            Base exception. All connection related exceptions can be caught in a single catch block by using catch(<see cref="T:NetworkCommsDotNet.CommsException" />)
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommsException.#ctor">
            <summary>
            Create a new instance of CommsException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommsException.#ctor(System.String)">
            <summary>
            Create a new instance of CommsException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommsException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of CommsException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.CheckSumException">
            <summary>
            A checksum error has occurred. NetworkComms.EnablePacketCheckSumValidation must be set to true for this exception to be thrown.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CheckSumException.#ctor">
            <summary>
            Create a new instance of CheckSumException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CheckSumException.#ctor(System.String)">
            <summary>
            Create a new instance of CheckSumException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.CheckSumException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of CheckSumException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.CheckSumException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.ConfirmationTimeoutException">
            <summary>
            A timeout has occurred while waiting for a confirmation packet to be received. Check for errors and or consider increasing NetworkComms.PacketConfirmationTimeoutMS
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConfirmationTimeoutException.#ctor">
            <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConfirmationTimeoutException.#ctor(System.String)">
            <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConfirmationTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConfirmationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.ExpectedReturnTimeoutException">
            <summary>
            A timeout has occurred while waiting for an expected return object. Check for errors and or consider increasing the provided return timeout value.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ExpectedReturnTimeoutException.#ctor">
            <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ExpectedReturnTimeoutException.#ctor(System.String)">
            <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.ExpectedReturnTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.ExpectedReturnTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.SerialisationException">
            <summary>
            An error occurred while trying to serialise/compress or deserialise/uncompress an object.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SerialisationException.#ctor">
            <summary>
            Create a new instance of SerialisationException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SerialisationException.#ctor(System.String)">
            <summary>
            Create a new instance of SerialisationException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.SerialisationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of SerialisationException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.SerialisationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.ConnectionSetupException">
            <summary>
            An error occurred while trying to establish a Connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSetupException.#ctor">
            <summary>
            Create a new instance of ConnectionSetupException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSetupException.#ctor(System.String)">
            <summary>
            Create a new instance of ConnectionSetupException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSetupException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of ConnectionSetupException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSetupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.ConnectionShutdownException">
            <summary>
            An error occurred while trying to establish a Connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionShutdownException.#ctor">
            <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionShutdownException.#ctor(System.String)">
            <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionShutdownException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionShutdownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.CommsSetupShutdownException">
            <summary>
            An error occurred while trying to setup or shutdown NetworkComms.Net
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommsSetupShutdownException.#ctor">
            <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommsSetupShutdownException.#ctor(System.String)">
            <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommsSetupShutdownException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommsSetupShutdownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.CommunicationException">
            <summary>
            An error occurred while during communication which does not fall under other exception cases.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommunicationException.#ctor">
            <summary>
            Create a new instance of CommunicationException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.CommunicationException.#ctor(System.String)">
            <summary>
            Create a new instance of CommunicationException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of CommunicationException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.UnexpectedPacketTypeException">
            <summary>
            An unexpected incoming packetType has been received. Consider setting NetworkComms.IgnoreUnknownPacketTypes to true to prevent this exception.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.UnexpectedPacketTypeException.#ctor">
            <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.UnexpectedPacketTypeException.#ctor(System.String)">
            <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.UnexpectedPacketTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.UnexpectedPacketTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.InvalidNetworkIdentifierException">
            <summary>
            An invalid network identifier has been provided.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.InvalidNetworkIdentifierException.#ctor">
            <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.InvalidNetworkIdentifierException.#ctor(System.String)">
            <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.InvalidNetworkIdentifierException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.InvalidNetworkIdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.DuplicateConnectionException">
            <summary>
            A possible duplicate connection has been detected.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DuplicateConnectionException.#ctor">
            <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DuplicateConnectionException.#ctor(System.String)">
            <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.DuplicateConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.DuplicateConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.ConnectionSendTimeoutException">
            <summary>
            A connection send has timed out.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSendTimeoutException.#ctor">
            <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSendTimeoutException.#ctor(System.String)">
            <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSendTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.ConnectionSendTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.PacketHandlerException">
            <summary>
            An error occurred during a packetType data handler execution.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHandlerException.#ctor">
            <summary>
            Create a new instance of PacketHandlerException
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHandlerException.#ctor(System.String)">
            <summary>
            Create a new instance of PacketHandlerException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHandlerException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of PacketHandlerException
            </summary>
            <param name="msg">A string containing useful information regarding the error</param>
            <param name="innerException">An associated inner exception</param>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
            <param name="info">
            </param>
            <param name="context">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.NetworkComms">
            <summary>
            Top level interface for NetworkComms.Net library. Anything which is not connection specific generally happens
            within the NetworkComms class. e.g. Keeping track of all connections, global defaults and settings, serialisers
            and data processors etc.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.#ctor">
            <summary>
            Static constructor which sets comm default values
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.NetworkIdentifier">
            <summary>
            The local identifier for this instance of NetworkCommsDotNet. This is an application unique identifier.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.CurrentRuntimeEnvironment">
            <summary>
            The current runtime environment. Detected automatically on start up. Performance may be adversely affected if this is changed.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.randomGen">
            <summary>
            An internal random object
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.commsShutdown">
            <summary>
            A single boolean used to control a NetworkCommsDotNet shutdown
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.totalPacketSendCount">
            <summary>
            A running total of the number of packets sent on all connections. Used to initialise packet sequence counters to ensure
            duplicates can not occur.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalDictAndDelegateLocker">
            <summary>
            Locker for connection dictionaries
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.allConnectionsByIdentifier">
            <summary>
            Primary connection dictionary stored by network identifier
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.allConnectionsByEndPoint">
            <summary>
            Secondary connection dictionary stored by end point. First key is connection type, second key is remote IPEndPoint, third
            key is local IPEndPoint
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.oldNetworkIdentifierToConnectionInfo">
            <summary>
            Old connection cache so that requests for connectionInfo can be returned even after a connection has been closed.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionListenModeUseSync">
            <summary>
            Used for switching between async and sync connectionListen modes. Default is false. No noticeable performance difference
            between the two modes when used with a small number of connections. For use cases with a high turnover of connections, i.e. 100/sec, performance is
            considerably better when ConnectionListenModeUseSync is set to true.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.MaxReceiveBufferSizeBytes">
            <summary>
            Maximum data buffer size that will be allocated for reading. Default is 80KB. CAUTION: Changing the default value can lead to performance degradation.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.InitialReceiveBufferSizeBytes">
            <summary>
            Initial receive data buffer size for reading data. Keeping this small reduces the static size of connection objects which each have an internal buffer. Default is 512 bytes. CAUTION: Changing the default value can lead to performance degradation.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.SendBufferSizeBytes">
            <summary>
            Send data buffer size. Default is 80KB. CAUTION: Changing the default value can lead to performance degradation.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.CommsThreadPool">
            <summary>
            The thread pool used by NetworkComms.Net to execute incoming packet handlers.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.IncomingConnectionEstablishThreadPool">
            <summary>
            The thread pool used by NetworkComms.Net to handle all incoming connection establishes.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.CompleteIncomingItemTask(System.Object)">
            <summary>
            Once we have received all incoming data we handle it further. This is performed at the global level to help support different
            priorities.
            </summary>
            <param name="priorityQueueItemObj">Possible PriorityQueueItem. If null is provided an item will be removed from the global item queue</param>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.timeCriticalThreadPriority">
            <summary>
            In times of high CPU usage we need to ensure that certain time critical functions, like connection handshaking do not timeout.
            This sets the thread priority for those processes.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.EnablePacketCheckSumValidation">
            <summary>
            When enabled uses an MD5 checksum to validate all received packets. Default is false, relying on any possible connection
            checksum alone. Also when enabled any packets sent less than CheckSumMismatchSentPacketCacheMaxByteLimit will be cached
            for a duration to ensure successful delivery. Default false.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.CheckSumMismatchSentPacketCacheMaxByteLimit">
            <summary>
            When checksum validation is enabled sets the limit below which sent packets are cached to ensure successful delivery. Default 75KB.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.MinimumSentPacketCacheTimeMinutes">
            <summary>
            When a sent packet has been cached for a possible resend this is the minimum length of time it will be retained.
            Default is 1.0 minutes.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.LastSentPacketCacheCleanup">
            <summary>
            Records the last sent packet cache clean up time. Prevents the sent packet cache from being checked too frequently.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.ReservedPacketTypeNames">
            <summary>
            An internal reference copy of all reservedPacketTypeNames, key is packet type name
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalIncomingPacketHandlers">
            <summary>
            Dictionary of all custom packetHandlers. Key is packetType.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalIncomingPacketUnwrappers">
            <summary>
            Dictionary of any non default custom packet unwrappers. Key is packetType.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate`1">
            <summary>
            Delegate for handling incoming packets. See AppendGlobalIncomingPacketHandler members.
            </summary>
            <typeparam name="incomingObjectType">The type of object which is expected for this handler</typeparam>
            <param name="packetHeader">The <see cref="T:NetworkCommsDotNet.PacketHeader" /> of the incoming packet</param>
            <param name="connection">The connection with which this packet was received</param>
            <param name="incomingObject">The incoming object of specified type T</param>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.IgnoreUnknownPacketTypes">
            <summary>
            If true any unknown incoming packet types are ignored. Default is false and will result in an error file being created if
            an unknown packet type is received.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Add an incoming packet handler using default SendReceiveOptions. Multiple handlers for the same packet type will be
            executed in the order they are added.
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0},NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Add an incoming packet handler using the provided SendReceiveOptions. Multiple handlers for the same packet type will be executed in the order they are added.
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
            <param name="sendReceiveOptions">The SendReceiveOptions to be used for the provided packet type</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalIncomingUnmanagedPacketHandler(NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{System.Byte[]})">
            <summary>
            Add an incoming packet handler for unmanaged packets. Multiple handlers will be executed in the order they are added.
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when an unmanaged packet is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingUnmanagedPacketHandler``1(NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Removes the provided delegate for unmanaged packet types. If the provided delegate does not exist for this packet type just returns.
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to be removed</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Removes the provided delegate for the specified packet type. If the provided delegate does not exist for this packet type just returns.
            </summary>
            <param name="packetTypeStr">The packet type for which the delegate will be removed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be removed</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler(System.String)">
            <summary>
            Removes all delegates for the provided packet type.
            </summary>
            <param name="packetTypeStr">Packet type for which all delegates should be removed</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingUnmanagedPacketHandler">
            <summary>
            Removes all unmanaged packet handlers.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler">
            <summary>
            Removes all delegates for all packet types
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
            <param name="packetHeader">The packet header</param>
            <param name="connection">The incoming connection</param>
            <param name="incomingDataStream">The bytes corresponding to the incoming object</param>
            <param name="options">The SendReceiveOptions to be used to convert incomingObjectBytes back to the desired object</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
            <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
            <param name="packetHeader">The packet header</param>
            <param name="connection">The incoming connection</param>
            <param name="incomingDataStream">The bytes corresponding to the incoming object</param>
            <param name="options">The SendReceiveOptions to be used to convert incomingObjectBytes back to the desired object</param>
            <param name="ignoreUnknownPacketTypeOverride">Used to potentially override NetworkComms.IgnoreUnknownPacketTypes property</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.Object)">
            <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
            <param name="packetHeader">The packet header</param>
            <param name="connection">The incoming connection</param>
            <param name="returnObject">The deserialised payload object</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.Object,System.Boolean)">
            <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
            <param name="packetHeader">The packet header</param>
            <param name="connection">The incoming connection</param>
            <param name="returnObject">The deserialised payload object</param>
            <param name="ignoreUnknownPacketTypeOverride">Used to potentially override NetworkComms.IgnoreUnknownPacketTypes property</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerAllPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Trigger both globally defined and connection specific handlers for a packet type
            </summary>
            <param name="packetHeader">The header of the packet</param>
            <param name="connection">The connection on which the packet was recieved</param>
            <param name="dataStream">The <see cref="T:System.IO.Stream" /> containing the payload data of the packet</param>
            <param name="options">Options containing deserialisation parameters</param>
            <remarks>This method is likely to be marked for removal at some point in the future</remarks>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TriggerAllPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
            <summary>
            Trigger both globally defined and connection specific handlers for a packet type
            </summary>
            <param name="packetHeader">The header of the packet</param>
            <param name="connection">The connection on which the packet was recieved</param>
            <param name="dataStream">The <see cref="T:System.IO.Stream" /> containing the payload data of the packet</param>
            <param name="options">Options containing deserialisation parameters</param>
            <param name="ignoreUnknownPacketTypeOverride">Used to potentially override NetworkComms.IgnoreUnknownPacketTypes property</param>
            <remarks>This method is likely to be marked for removal at some point in the future</remarks>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GlobalPacketTypeUnwrapperOptions(System.String)">
            <summary>
            Returns the unwrapper <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> for the provided packet type. If no specific options are registered returns null.
            </summary>
            <param name="packetTypeStr">The packet type for which the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> are required</param>
            <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> otherwise null</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingPacketHandlerExists(System.String)">
            <summary>
            Returns true if a global packet handler exists for the provided packet type.
            </summary>
            <param name="packetTypeStr">The packet type for which to check incoming packet handlers</param>
            <returns>True if a global packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingUnmanagedPacketHandlerExists">
            <summary>
            Returns true if a global unmanaged packet handler exists
            </summary>
            <returns>True if a global unmanaged packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingPacketHandlerExists``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Returns true if the provided global packet handler has been added for the provided packet type.
            </summary>
            <param name="packetTypeStr">The packet type within which to check packet handlers</param>
            <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
            <returns>True if a global packet handler exists for the provided packetType</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingUnmanagedPacketHandlerExists``1(NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Returns true if the provided global unmanaged packet handler has been added.
            </summary>
            <param name="packetHandlerDelgatePointer">The packet handler to look for.</param>
            <returns>True if a global unmanaged packet handler exists.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate">
            <summary>
            Delegate which is executed when a connection is established or shutdown. See <see cref="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate,System.Boolean)" /> and <see cref="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)" />.
            </summary>
            <param name="connection">The connection which has been established or shutdown.</param>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionShutdownDelegates">
            <summary>
            Multicast delegate pointer for connection shutdowns.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionShutdownDelegateCount">
            <summary>
            Delegate counter for debugging.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegatesAsync">
            <summary>
            Multicast delegate pointer for connection establishments, run asynchronously.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegatesSync">
            <summary>
            Multicast delegate pointer for connection establishments, run synchronously.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegateCount">
            <summary>
            Delegate counter for debugging.
            </summary>
        </member>
        <member name="E:NetworkCommsDotNet.NetworkComms.OnCommsShutdown">
            <summary>
            Comms shutdown event. This will be triggered when calling NetworkComms.Shutdown
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
            <summary>
            Add a new connection shutdown delegate which will be called for every connection as it is closes.
            </summary>
            <param name="connectionShutdownDelegate">The delegate to call on all connection shutdowns</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
            <summary>
            Remove a connection shutdown delegate.
            </summary>
            <param name="connectionShutdownDelegate">The delegate to remove from connection shutdown events</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate,System.Boolean)">
            <summary>
            Add a new connection establish delegate which will be called for every connection once it has been successfully established.
            </summary>
            <param name="connectionEstablishDelegate">The delegate to call after all connection establishments.</param>
            <param name="runSynchronously">If true this ConnectionEstablishShutdownDelegate will be called synchronously during the
            connection establish. The connection will not be considered established until the ConnectionEstablishShutdownDelegate has completed.</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
            <summary>
            Remove a connection establish delegate.
            </summary>
            <param name="connectionEstablishDelegate">The delegate to remove from connection establish events</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.Shutdown(System.Int32)">
            <summary>
            Shutdown all connections, threads and execute OnCommsShutdown event. Any packet handlers are left unchanged. If any network
            activity has taken place this should be called on application close.
            </summary>
            <param name="threadShutdownTimeoutMS">The time to wait for worker threads to close before attempting a thread abort.</param>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionEstablishTimeoutMS">
            <summary>
            Time to wait in milliseconds before throwing an exception when waiting for a connection to be established. Default is 10000.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.PacketConfirmationTimeoutMS">
            <summary>
            Time to wait in milliseconds before throwing an exception when waiting for confirmation of packet receipt. Default is 5000.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS">
            <summary>
            Time to wait in milliseconds before assuming a remote connection is dead when doing a connection test. Default is 1000.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.DisableConnectionSendTimeouts">
            <summary>
            By default NetworkComms.Net closes connections for which sends take a long time. The timeout is calculated based on previous connection send performances. Set this to true to disable this feature.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.LoggingEnabled">
            <summary>
            Returns true if NetworkComms.Net logging has been enabled.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.Logger">
            <summary>
            Access the NetworkCommsDotNet logger externally.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.EnableLogging">
            <summary>
            Enable logging using a default config. All log output is written directly to the local console.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.EnableLogging(NetworkCommsDotNet.Tools.ILogger)">
            <summary>
            Enable logging using the provided config. See examples for usage.
            </summary>
            <param name="logger">The logger to use for logging</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.DisableLogging">
            <summary>
            Disable all logging in NetworkCommsDotNet
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.InternalFixedSendReceiveOptions">
            <summary>
            The following are used for internal NetworkComms.Net objects, packet headers, connection establishment etc.
            We generally seem to increase the size of our data if compressing small objects (~50 bytes)
            Given the typical header size is 40 bytes we might as well not compress these objects.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.NetworkComms.DefaultSendReceiveOptions">
            <summary>
            Default options for sending and receiving in the absence of specific values
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.SendObject``1(System.String,System.String,System.Int32,``0)">
            <summary>
            Send the provided object to the specified destination using TCP. Uses default sendReceiveOptions. For more control over
            options see connection specific methods.
            </summary>
            <param name="packetTypeStr">Packet type to use for send</param>
            <param name="destinationIPAddress">The destination IP address</param>
            <param name="destinationPort">The destination listen port</param>
            <param name="sendObject">The object to send</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.SendReceiveObject``2(System.String,System.String,System.Int32,System.String,System.Int32,``0)">
            <summary>
            Send the provided object to the specified destination and wait for a return object using TCP. Uses default sendReceiveOptions.
            For more control over options see connection specific methods.
            </summary>
            <typeparam name="sendObjectType">The sending object type, i.e. string, int[], etc</typeparam>
            <typeparam name="returnObjectType">The expected return object type, i.e. string, int[], etc</typeparam>
            <param name="sendingPacketTypeStr">Packet type to use during send</param>
            <param name="destinationIPAddress">The destination IP address</param>
            <param name="destinationPort">The destination listen port</param>
            <param name="expectedReturnPacketTypeStr">Expected packet type used for return object</param>
            <param name="returnPacketTimeOutMilliSeconds">Time to wait in milliseconds for return object</param>
            <param name="sendObject">Object to send</param>
            <returns>The expected return object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AllConnectionInfo(System.Boolean)">
            <summary>
            Returns a ConnectionInfo array containing information for all connections
            </summary>
            <param name="includeClosedConnections">If true information for closed connections will also be included</param>
            <returns>List of ConnectionInfo containing information for all requested connections</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AllConnectionInfo(NetworkCommsDotNet.Tools.ShortGuid,System.Boolean)">
            <summary>
            Returns a ConnectionInfo array containing information for all connections which have the provided networkIdentifier.
            It is also possible to include information for closed connections.
            </summary>
            <param name="networkIdentifier">The networkIdentifier corresponding to the desired connectionInfo information</param>
            <param name="includeClosedConnections">If true will include information for connections which are closed. Otherwise only
            active connections will be included.</param>
            <returns>List of ConnectionInfo containing information for matching connections</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TotalNumConnections">
            <summary>
            Returns the total number of connections
            </summary>
            <returns>Total number of connections</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TotalNumConnections(NetworkCommsDotNet.Connections.ConnectionType)">
            <summary>
            Returns the total number of connections of the provided type
            </summary>
            <param name="connectionType">The type of connections to count</param>
            <returns>Total number of connections</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.TotalNumConnections(System.Net.IPAddress)">
            <summary>
            Returns the total number of connections where the <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> matches the provided
            <see cref="T:System.Net.IPAddress" /></summary>
            <param name="matchRemoteEndPointIP">The <see cref="T:System.Net.IPAddress" /> to match</param>
            <returns>Total number of connections where the <see cref="!:ConnectionInfo.RemoteEndPoint " /> matches the provided
            <see cref="T:System.Net.IPAddress" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections">
            <summary>
            Close all connections
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections(NetworkCommsDotNet.Connections.ConnectionType)">
            <summary>
            Close all connections of the provided <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /></summary>
            <param name="connectionType">The type of connections to be closed</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections(NetworkCommsDotNet.Connections.ConnectionType,System.Net.EndPoint[])">
            <summary>
            Close all connections of the provided <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> except to provided <see cref="T:System.Net.EndPoint" /> array.
            </summary>
            <param name="connectionTypeToClose">The type of connections to be closed. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" /> matches all types.</param>
            <param name="closeAllExceptTheseRemoteEndPoints">Close all except those with remote EndPoint that is provided in <see cref="T:System.Net.EndPoint" /> array</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Returns a list of all connections which match the provided parameters. If no parameter are provided returns all connections.
            </summary>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>A list of requested connections. If no matching connections exist returns empty list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Returns a list of all connections matching the provided parameters.
            </summary>
            <param name="connectionType">The type of connections to return. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" /> matches
            all types.</param>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>A list of requested connections. If no matching connections exist returns empty list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.Tools.ShortGuid,NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Returns a list of all connections matching the provided parameters.
            </summary>
            <param name="networkIdentifier">The <see cref="T:NetworkCommsDotNet.Tools.ShortGuid" /> corresponding with the desired peer networkIdentifier</param>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> desired. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" />
            matches all types.</param>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>A list of connections to the desired peer. If no matching connections exist returns empty list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(System.Net.EndPoint,System.Net.EndPoint,NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Returns a list of all connections matching the provided parameters.
            </summary>
            <param name="remoteEndPoint">Remote EndPoint corresponding with the desired connection. Use IPAddress.Any to match all
            IPAddresses. Use port number 0 to match all port numbers.</param>
            <param name="localEndPoint">Local EndPoint corresponding with the desired connection. Use IPAddress.Any to match all
            IPAddresses. Use port number 0 to match all port numbers.</param>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> desired. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" />
            matches all types.</param>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>A list of connections to the desired peer. If no matching connections exists returns empty list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)">
            <summary>
            Retrieve an existing connection with the provided ConnectionInfo. Internally matches connection based on IPEndPoint, ConnectionType,
            NetworkIdentifier and ApplicationLayerProtocol status.
            </summary>
            <param name="connectionInfo">ConnectionInfo corresponding with the desired connection.</param>
            <returns>The desired connection. If no matching connection exists returns null.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(NetworkCommsDotNet.ConnectionInfo)">
            <summary>
            Check if a connection with the provided ConnectionInfo exists. Internally matches connection based on IPEndPoint, ConnectionType,
            NetworkIdentifier and ApplicationLayerProtocol status.
            </summary>
            <param name="connectionInfo">ConnectionInfo corresponding with the desired connection</param>
            <returns>True if a matching connection exists, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(NetworkCommsDotNet.Tools.ShortGuid,NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Check if a connection exists with the provided parameters.
            </summary>
            <param name="networkIdentifier">The <see cref="T:NetworkCommsDotNet.Tools.ShortGuid" /> corresponding with the desired peer networkIdentifier</param>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> desired. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" />
            matches all types.</param>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>True if a matching connection exists, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(System.Net.EndPoint,System.Net.EndPoint,NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Check if a connection exists with the provided parameters.
            </summary>
            <param name="remoteEndPoint">Remote EndPoint corresponding with the desired connection. Use IPAddress.Any to match all
            IPAddresses. Use port number 0 to match all port numbers.</param>
            <param name="localEndPoint">Local EndPoint corresponding with the desired connection. Use IPAddress.Any to match all
            IPAddresses. Use port number 0 to match all port numbers.</param>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> desired. ConnectionType.<see cref="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined" />
            matches all types.</param>
            <param name="applicationLayerProtocol">Connections with matching ApplicationLayerProtocolStatus.
            Use ApplicationLayerProtocolStatus.<see cref="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined" /> to match all status types.</param>
            <returns>True if a matching connection exists, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.RemoveConnectionReference(NetworkCommsDotNet.Connections.Connection,System.Boolean)">
            <summary>
            Removes the reference to the provided connection from within networkComms. DOES NOT CLOSE THE CONNECTION. Returns true if
            the provided connection reference existed and was removed, false otherwise.
            </summary>
            <param name="connection">
            </param>
            <param name="maintainConnectionInfoHistory">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AddConnectionReferenceByRemoteEndPoint(NetworkCommsDotNet.Connections.Connection,System.Net.EndPoint,System.Net.EndPoint)">
            <summary>
            Adds a reference by EndPoint to the provided connection within networkComms.
            </summary>
            <param name="connection">
            </param>
            <param name="remoteEndPointToUse">An optional override which forces a specific remote EndPoint</param>
            <param name="localEndPointToUse">An optional override which forces a specific local EndPoint</param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.UpdateConnectionReferenceByEndPoint(NetworkCommsDotNet.Connections.Connection,System.Net.EndPoint,System.Net.EndPoint)">
            <summary>
            Update the endPoint reference for the provided connection with the newEndPoint. If there is no change just returns
            </summary>
            <param name="connection">
            </param>
            <param name="newRemoteEndPoint">
            </param>
            <param name="newLocalEndPoint">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.NetworkComms.AddConnectionReferenceByIdentifier(NetworkCommsDotNet.Connections.Connection)">
            <summary>
            Add a reference by networkIdentifier to the provided connection within NetworkComms.Net. Requires a reference by
            EndPoint to already exist.
            </summary>
            <param name="connection">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.IPacket">
            <summary>
            Interface for defining Application Layer Protocol packets
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.IPacket.PacketHeader">
            <summary>
            The packet header for this packet
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.IPacket.PacketData">
            <summary>
            The payload data stream
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.IPacket.SerialiseHeader(NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Returns the serialised bytes of the packet header appended by the serialised header size. This is required to
            rebuild the header on receive.
            </summary>
            <returns>The serialised header as byte[]</returns>
        </member>
        <member name="M:NetworkCommsDotNet.IPacket.Dispose">
            <summary>
            Dispose of internal packet resources
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Packet">
            <summary>
            Wrapper for <see cref="T:NetworkCommsDotNet.PacketHeader" /> and packetData.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Packet._packetHeader">
            <summary>
            If we serialise a whole packet we include the packet header
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Packet._payloadObjectBytes">
            <summary>
            And the payload object as byte[]. We cannot use type T here because we do not know the type of T
            on deserialisation until we have the nested packet header.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Packet.#ctor">
            <summary>
            Parameterless constructor for deserialisation
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Packet.#ctor(System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Create a new packet
            </summary>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="payloadObject">The object to be sent</param>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used to create this packet</param>
        </member>
        <member name="M:NetworkCommsDotNet.Packet.#ctor(System.String,System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Create a new packet
            </summary>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="requestReturnPacketTypeStr">The expected return packet type</param>
            <param name="payloadObject">The object to be sent</param>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used to create this packet</param>
        </member>
        <member name="M:NetworkCommsDotNet.Packet.#ctor(System.String,System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
            <summary>
            Private constructor used for nesting packets
            </summary>
            <param name="sendingPacketTypeStr">
            </param>
            <param name="requestReturnPacketTypeStr">
            </param>
            <param name="payloadObject">
            </param>
            <param name="options">
            </param>
            <param name="isNested">
            </param>
        </member>
        <member name="P:NetworkCommsDotNet.Packet.PacketHeader">
            <inheritdoc />
        </member>
        <member name="P:NetworkCommsDotNet.Packet.PacketData">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Packet.SerialiseHeader(NetworkCommsDotNet.SendReceiveOptions)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Packet.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Packet.Serialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Packet.Deserialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Packet.Deserialize(System.IO.Stream,NetworkCommsDotNet.Packet@)">
            <summary>
            Deserializes from a memory stream to a <see cref="T:NetworkCommsDotNet.Packet" /> object
            </summary>
            <param name="inputStream">The memory stream containing the serialized <see cref="T:NetworkCommsDotNet.Packet" /></param>
            <param name="result">The deserialized <see cref="T:NetworkCommsDotNet.Packet" /></param>
        </member>
        <member name="T:NetworkCommsDotNet.PacketHeaderLongItems">
            <summary>
            Any <see cref="T:NetworkCommsDotNet.PacketHeader" /> options which are stored as a long.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.TotalPayloadSize">
            <summary>
            The total size of the packet data payload in bytes. This is a compulsory option.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.SerializerProcessors">
            <summary>
            The data serialiser and data processor used to unwrap the payload. Used as flags.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.PacketSequenceNumber">
            <summary>
            The sequence number for this packet. Each connection maintains a unique counter which is increments on each sent packet. This is a compulsory option.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.PacketCreationTime">
            <summary>
            The creation time of the packet header.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.PacketHeaderStringItems">
            <summary>
            Any <see cref="T:NetworkCommsDotNet.PacketHeader" /> options which are stored as a string.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.PacketType">
            <summary>
            The type of the packet. This is a compulsory option which determines how the incoming packet is handled.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.ReceiveConfirmationRequired">
            <summary>
            Specifies if a receive confirmation is required for this packet. String option as takes up less space for a boolean option.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.RequestedReturnPacketType">
            <summary>
            The packet type which should be used for any return packet type.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.CheckSumHash">
            <summary>
            A checksum corresponding to the payload data.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.SourceNetworkIdentifier">
            <summary>
            The network identifier of the packet source
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.PacketIdentifier">
            <summary>
            Optional packet identifier.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.NullDataSection">
            <summary>
            The data section should be interpreted as a null
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.PacketHeader">
            <summary>
            Contains information required to send, receive and correctly rebuild any objects sent via NetworkComms.Net.
            Any data sent via NetworkCommsDotNet is always preceded by a packetHeader.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.#ctor">
            <summary>
            Blank constructor required for deserialisation
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.#ctor(System.String,System.Int64,NetworkCommsDotNet.SendReceiveOptions,System.String,System.String)">
            <summary>
            Creates a new packetHeader
            </summary>
            <param name="packetTypeStr">The packet type to be used.</param>
            <param name="payloadPacketSize">The size on bytes of the payload</param>
            <param name="sendReceiveOptions">Send receive options which may contain header relevant options.</param>
            <param name="requestedReturnPacketTypeStr">An optional field representing the expected return packet type</param>
            <param name="checkSumHash">An optional field representing the payload checksum</param>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.#ctor(System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Constructor used for deserialisation
            </summary>
            <param name="packetHeaderStream">
            </param>
            <param name="headerSendReceiveOptions">
            </param>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.TotalPayloadSize">
            <summary>
            The total size in bytes of the payload.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.PacketType">
            <summary>
            The packet type.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.PacketSequenceNumber">
            <summary>
            The sequence number for this packet
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.RequestedReturnPacketType">
            <summary>
            The packet type which should be used for any return packet type. If no return packet type is set returns null.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.PacketIdentifier">
            <summary>
            Optional packet identifier. If no packet identifier is set returns null.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.SourceNetworkIdentifier">
            <summary>
            The network identifier of the packets source peer. If no source network identifier is set returns null.
            Also see <see cref="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.PacketHeader.CheckSumHash">
            <summary>
            A checksum corresponding to the payload data. If no checksum is set returns null.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.ContainsOption(NetworkCommsDotNet.PacketHeaderStringItems)">
            <summary>
            Check if a string option has been set.
            </summary>
            <param name="option">The string option to be checked.</param>
            <returns>Returns true if the provided string option has been set.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.ContainsOption(NetworkCommsDotNet.PacketHeaderLongItems)">
            <summary>
            Check if a long option has been set.
            </summary>
            <param name="option">The long option to be checked.</param>
            <returns>Returns true if the provided long option has been set.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.GetOption(NetworkCommsDotNet.PacketHeaderLongItems)">
            <summary>
            Get a long option.
            </summary>
            <param name="option">The option to get</param>
            <returns>The requested long option</returns>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.GetOption(NetworkCommsDotNet.PacketHeaderStringItems)">
            <summary>
            Get a string option
            </summary>
            <param name="options">The option to get</param>
            <returns>The requested string option</returns>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.SetOption(NetworkCommsDotNet.PacketHeaderLongItems,System.Int64)">
            <summary>
            Set a long option with the provided value.
            </summary>
            <param name="option">The option to set</param>
            <param name="Value">The option value</param>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.SetOption(NetworkCommsDotNet.PacketHeaderStringItems,System.String)">
            <summary>
            Set a string option with the provided value.
            </summary>
            <param name="option">The option to set</param>
            <param name="Value">The option value</param>
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.Serialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.Deserialize(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.PacketHeader.Deserialize(System.IO.Stream,NetworkCommsDotNet.PacketHeader@)">
            <summary>
            Deserializes from a memory stream to a <see cref="T:NetworkCommsDotNet.PacketHeader" /> object
            </summary>
            <param name="inputStream">The memory stream containing the serialized <see cref="T:NetworkCommsDotNet.PacketHeader" /></param>
            <param name="result">The deserialized <see cref="T:NetworkCommsDotNet.PacketHeader" /></param>
        </member>
        <member name="T:NetworkCommsDotNet.ReservedPacketType">
            <summary>
            Reserved packetTypeStrs. Removing or modifying these will prevent NetworkComms.Net from working
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.RuntimeEnvironment">
            <summary>
            Specifies the current runtime environment. Used for changing minor settings based on environment.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net4">
            <summary>
            Native .Net 4.0 - Default
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net4">
            <summary>
            Mono .Net 4.0
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net35">
            <summary>
            Native .Net3.5
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net35">
            <summary>
            Mono .Net 3.5
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net2">
            <summary>
            Native .Net 2
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net2">
            <summary>
            Mono .Net 2
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.WindowsPhone_Silverlight">
            <summary>
            Windows Phone 7.1 (8) or Silverlight
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Xamarin_Android">
            <summary>
            Xamarin.Android
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Xamarin_iOS">
            <summary>
            Xamarin.iOS
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Windows_RT">
            <summary>
            Windows RT or Windows Store
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions">
            <summary>
            Contains options and flags for sending and receiving data such as serialisation method, data processors, encryption etc.
            Several static constructors are provided to help create SendReceiveOptions in the most common formats.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.ReceiveConfirmationRequired">
            <summary>
            If true any packets sent with this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> will be forced to trigger a receive confirmation.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.IncludePacketConstructionTime">
            <summary>
            If true any packets sent with this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> will include the packet creation time in the header.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.UseNestedPacket">
            <summary>
            If true any packets sent with this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> will be nested which can be used to obscure the actual
            packet type.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.ReceiveHandlePriority">
            <summary>
            Incoming packets are handled using a flexible QueueItemPriority (Default - QueueItemPriority.Normal). Reserved internal
            packet types and packets marked with QueueItemPriority.Highest are not enqueued but handled in real time by the thread
            handling the incoming data. You are free to specify the queue item priority for packet handlers using this
            SendReceiveOptions by setting this value as desired. CAUTION: Only use QueueItemPriority.Highest sparingly.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.DataSerializer">
            <summary>
            Gets the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> that should be used when sending information
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.DataProcessors">
            <summary>
            Gets the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s that should be used when sending information. <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s are applied in index order
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.SendReceiveOptions.Options">
            <summary>
            Gets the options that should be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s on object serialization and deserialization
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions.#ctor(NetworkCommsDotNet.DPSBase.DataSerializer,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class with a specified <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" />, set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s and and other options
            </summary>
            <param name="serializer">The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</param>
            <param name="dataProcessors">The set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s to use.  The order in the list determines the order the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s will be applied</param>
            <param name="options">Allows additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class providing only options for the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s.  This constructor should only be used when adding packet handlers for incoming connections
            </summary>
            <param name="options">Allows additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions.OptionsCompatible(NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Determines whether the supplied <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> is compatible, from a serialization point of view, with this instance
            </summary>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to compare against</param>
            <returns>True if the options are compatible, false otherwise</returns>
            <remarks>Two <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> instances will be compatible if they use the same <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and the same set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</remarks>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions.Clone">
            <summary>
            Create a deep clone of this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> object.
            </summary>
            <returns>The cloned object</returns>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`1">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> is passed as a generic parameter and no <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s are used. To provide additional options see other overrides.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> is passed as a generic parameter and no <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s are used.
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /></param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`2">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and a single <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> while will be used are passed as generic parameters. To provide additional options see other overrides.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`2.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and a single <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /></param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`3">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`3.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 2 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`4">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP3">The type of the third <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`4.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 3 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`5">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP3">The type of the third <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP4">The type of the fourth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`5.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 4 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`6">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP3">The type of the third <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP4">The type of the fourth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP5">The type of the fifth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`6.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 5 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`7">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP3">The type of the third <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP4">The type of the fourth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP5">The type of the fifth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP6">The type of the sixth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`7.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 6 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.SendReceiveOptions`8">
            <inheritdoc />
            <typeparam name="T_DS">The type of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to use</typeparam>
            <typeparam name="T_DP1">The type of the first <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP2">The type of the second <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP3">The type of the third <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP4">The type of the fourth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP5">The type of the fifth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP6">The type of the sixth <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
            <typeparam name="T_DP7">The type of the seventh <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to use</typeparam>
        </member>
        <member name="M:NetworkCommsDotNet.SendReceiveOptions`8.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and 7 <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
            <param name="options">Additional options to be passed to the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.Adler32Checksum">
            <summary>
            Implementation of the <see href="http://en.wikipedia.org/wiki/Adler-32">Adler32</see> checksum algorithm.
            It is not a particularly reliable checksum compared with <see href="http://en.wikipedia.org/wiki/MD5">MD5</see> but it is about 10 times faster.
            NetworkComms.Net uses <see href="http://en.wikipedia.org/wiki/MD5">MD5</see> as its default but this class is provided should speed be the more important factor.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.Adler32Checksum.GenerateCheckSum(System.Byte[])">
            <summary>
            Generate an Adler32 checksum value based on the provided byte array.
            </summary>
            <param name="buffer">Buffer for which the checksum should be calculated.</param>
            <returns>The checksum value</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.Adler32Checksum.GenerateCheckSumSplitBuffer(System.Byte[][])">
            <summary>
            Generate a single Adler32 checksum value based on the provided byte arrays. Checksum calculated from splitBuffer[0] onwards.
            </summary>
            <param name="splitBuffer">Buffers for which the checksum should be calculated.</param>
            <returns>The checksum value</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.CommsMath">
            <summary>
            A class used for math operations in NetworkComms.Net. Primarily used for load analysis.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.#ctor">
            <summary>
            Create a new empty instance of CommsMath
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Create a new empty instance of CommsMath
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsMath.Count">
            <summary>
            Returns the number of values in this object
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.AddValue(System.Double)">
            <summary>
            Add a new value to the internal list
            </summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.AddValue(System.Double,System.Double)">
            <summary>
            Add a new value to the internal list
            </summary>
            <param name="value">The value to add</param>
            <param name="weight">The weight to apply to the provided value</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.TrimList(System.Int32)">
            <summary>
            Trims the list to the provided maxCount. The most recently added items are preserved.
            </summary>
            <param name="maxCount">The maximum size of the list after being trimmed</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.ClearList">
            <summary>
            Reset the value list
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateMean">
            <summary>
            Return the mean of the current list.
            </summary>
            <returns>The mean of all values currently in the list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateStdDeviation">
            <summary>
            Return the standard deviation of the current list.
            </summary>
            <returns>The standard deviation of all values currently in the list.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateMean(System.Int32)">
            <summary>
            Return the mean of the current list.
            </summary>
            <param name="lastNValues">If less than the number of items in the value list returns the mean of the lastNValues</param>
            <returns>The mean of relevant values</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateStdDeviation(System.Int32)">
            <summary>
            Return the standard deviation of the current list.
            </summary>
            <param name="lastNValues">If less than the number of items in the value list returns the mean of the lastNValues</param>
            <returns>The mean of relevant values</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateMean(System.Collections.Generic.List{System.Double})">
            <summary>
            Return the mean of the provided list of values
            </summary>
            <param name="localValues">Values for which a mean should be calculated</param>
            <returns>The mean of provided values</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateMean(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Return the mean of the provided list of values
            </summary>
            <param name="localValues">Values for which a mean should be calculated</param>
            <param name="weights">The weights to apply to the corresponding values</param>
            <returns>The mean of provided values</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateStdDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Return the standard deviation of the provided list of values
            </summary>
            <param name="localValues">Values for which a standard deviation should be calculated</param>
            <returns>The standard deviation of provided values</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsMath.CalculateStdDeviation(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Return the standard deviation of the provided list of values
            </summary>
            <param name="localValues">Values for which a standard deviation should be calculated</param>
            <param name="weights">The weights to apply to the corresponding values</param>
            <returns>The standard deviation of provided values</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.CommsThreadPool">
            <summary>
            A compact priority based thread pool used by NetworkComms.Net to run packet handlers
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.SyncRoot">
            <summary>
            A sync object to make things thread safe
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.threadDict">
            <summary>
            Dictionary of threads, index is ThreadId
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.workerInfoDict">
            <summary>
            Dictionary of thread worker info, index is ThreadId
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.ThreadWaitSleepJoinCountUpdateInterval">
            <summary>
            The minimum timespan between thread wait sleep join updates
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.requireJobThreadsCount">
            <summary>
            A quick lookup of the number of current threads which are idle and require jobs
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.jobQueue">
            <summary>
            Priority queue used to order call backs
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.CommsThreadPool.shutdown">
            <summary>
            Set to true to ensure correct shutdown of worker threads.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.ThreadIdleTimeoutClose">
            <summary>
            The timespan after which an idle thread will close
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.MaxTotalThreadsCount">
            <summary>
            The maximum number of threads to create in the pool
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.MaxActiveThreadsCount">
            <summary>
            The maximum number of active threads in the pool. This can be less than MaxTotalThreadsCount, taking account of waiting threads.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.MinThreadsCount">
            <summary>
            The minimum number of idle threads to maintain in the pool
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.CurrentNumWaitSleepJoinThreadsCache">
            <summary>
            The most recent count of pool threads which are waiting for IO
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.LastThreadWaitSleepJoinCountCacheUpdate">
            <summary>
            The dateTime associated with the most recent count of pool threads which are waiting for IO
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.CurrentNumTotalThreads">
            <summary>
            The total number of threads currently in the thread pool
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.CurrentNumIdleThreads">
            <summary>
            The total number of idle threads currently in the thread pool
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CommsThreadPool.QueueCount">
            <summary>
            The total number of items currently waiting to be collected by a thread
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.#ctor(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Create a new NetworkComms.Net thread pool
            </summary>
            <param name="minThreadsCount">Minimum number of idle threads to maintain in the pool</param>
            <param name="maxActiveThreadsCount">The maximum number of active (i.e. not waiting for IO) threads</param>
            <param name="maxTotalThreadsCount">Maximum number of threads to create in the pool</param>
            <param name="threadIdleTimeoutClose">Timespan after which an idle thread will close</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.BeginShutdown">
            <summary>
            Prevent any additional threads from starting. Returns immediately.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.EndShutdown(System.Int32)">
            <summary>
            Prevent any additional threads from starting and return once all existing workers have completed.
            </summary>
            <param name="threadShutdownTimeoutMS">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.EnqueueItem(NetworkCommsDotNet.Tools.QueueItemPriority,System.Threading.WaitCallback,System.Object)">
            <summary>
            Enqueue a callback to the thread pool.
            </summary>
            <param name="priority">The priority with which to enqueue the provided callback</param>
            <param name="callback">The callback to execute</param>
            <param name="state">The state parameter to pass to the callback when executed</param>
            <returns>Returns the managed threadId running the callback if one was available, otherwise -1</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.ThreadWorker(System.Object)">
            <summary>
            The worker object for the thread pool
            </summary>
            <param name="state">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.UpdateThreadWaitSleepJoinCountCache">
            <summary>
            Returns the total number of threads in the pool which are waiting for IO
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CommsThreadPool.ToString">
            <summary>
            Provides a brief string summarisation the state of the thread pool
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.WorkerInfo">
            <summary>
            A private wrapper used by CommsThreadPool
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.WorkerInfo.SetInsideCallBack">
            <summary>
            Set InsideCallBack to true
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.WorkerInfo.ClearInsideCallBack">
            <summary>
            Set InsideCallBack to false
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.WorkerInfo.SetThreadIdle">
            <summary>
            Set threadIdle to true
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.WorkerInfo.ClearThreadIdle">
            <summary>
            Set threadIdle to false
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.WaitCallBackWrapper">
            <summary>
            A private wrapper used by CommsThreadPool
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.DOSProtection">
            <summary>
            NetworkComms.Net class used for providing Denial Of Service (DOS) protection features.
            If enabled, malformed data events and connection initialises are tracked. If above
            set thresholds IPAddresses are banned.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.DOSProtection._syncRoot">
            <summary>
            A local thread safety locker
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.DOSProtection._bannedAddresses">
            <summary>
            Addresses that are currently banned. Key is remote IPAddress, value is time banned.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.DOSProtection._malformedCountDict">
            <summary>
            First key is remote IPAddress, second key is DateTime.Ticks, value is the malformed count for that DateTime.ticks
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.DOSProtection._connectionInitialiseCountDict">
            <summary>
            First key is remote IPAddress, second key is DateTime.Ticks, value is the connection initialisation count for that DateTime.ticks
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.DOSProtection.Enabled">
            <summary>
            The current state of DOS protection
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.DOSProtection.BanTimeout">
            <summary>
            The timeout after which time a banned IPAddress may have access again. Default is 10 minutes.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.DOSProtection.LogInterval">
            <summary>
            The time within which if MalformedCountInIntervalBeforeBan or ConnectionInitialiseCountInIntervalBeforeBan
            is reached a peer will be banned. Default is 5 minutes.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.DOSProtection.MalformedCountInIntervalBeforeBan">
            <summary>
            The number of malformed data counts to log within LogInterval before an IPAddress is banned. Default is 2.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.DOSProtection.ConnectionInitialiseCountInIntervalBeforeBan">
            <summary>
            The number of connection initialises to log within LogInterval before an IPAddress is banned. Default is 100
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.DOSProtection.#ctor">
            <summary>
            Initialise a new instance of DOS protection.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.DOSProtection.LogMalformedData(System.Net.IPAddress)">
            <summary>
            Log a malformed data event for the provided remote IPAddress.
            </summary>
            <param name="remoteIPAddress">
            </param>
            <returns>True if the remote IPAddress is now banned, otherwise false.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.DOSProtection.LogConnectionInitialise(System.Net.IPAddress)">
            <summary>
            Log a connection initialisation for the provided remote IPAddress.
            </summary>
            <param name="remoteIPAddress">
            </param>
            <returns>True if the remote IPAddress is now banned, otherwise false.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.DOSProtection.RemoteIPAddressBanned(System.Net.IPAddress)">
            <summary>
            Returns true if the provided IPAddress has been banned due to DOSProtection.
            </summary>
            <param name="remoteIPAddress">The IPAddress to check</param>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.HostInfo">
            <summary>
            A static class which provides information about the local host.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.HostName">
            <summary>
            Returns the current machine hostname
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.RestrictLocalAdaptorNames">
            <summary>
            Restricts the addresses that may be used when listening.
            If set <see cref="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses" /> will only return addresses corresponding with specified adaptors names.
            Please see <see cref="M:NetworkCommsDotNet.Tools.HostInfo.AllLocalAdaptorNames" /> for a list of local adaptor names.
            Correct format is string[] { "Local Area Connection", "eth0", "en0", "wlan0" }.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.AllLocalAdaptorNames">
            <summary>
            Returns all local adaptor names. Can be used to determine which adaptor names to use with <see cref="P:NetworkCommsDotNet.Tools.HostInfo.RestrictLocalAdaptorNames" />.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.HostInfo.IP">
            <summary>
            Host IP information
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.IP.RestrictLocalAddressRanges">
            <summary>
            Restricts the IPAdddresses that are returned by <see cref="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses" />.
            If using StartListening overrides that do not take IPEndPoints NetworkComms.Net
            will only listen on IP Addresses within provided ranges. Also see <see cref="P:NetworkCommsDotNet.Tools.HostInfo.RestrictLocalAdaptorNames" />.
            The order of provided ranges determines the order of IPAddresses returned by <see cref="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses" />.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses">
            <summary>
            Returns all allowed local IP addresses. Caches results for up to 5 second since the previous refresh.
            If <see cref="P:NetworkCommsDotNet.Tools.HostInfo.RestrictLocalAdaptorNames" /> has been set only returns IP addresses corresponding with specified adaptors.
            If <see cref="P:NetworkCommsDotNet.Tools.HostInfo.IP.RestrictLocalAddressRanges" /> has been set only returns matching addresses ordered in descending
            preference. i.e. Most preferred at [0].
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses(System.Boolean)">
            <summary>
            Returns all allowed local IP addresses. Caches results for up to 5 second since the previous refresh unless forceCacheUpdate is true.
            If <see cref="P:NetworkCommsDotNet.Tools.HostInfo.RestrictLocalAdaptorNames" /> has been set only returns IP addresses corresponding with specified adaptors.
            If <see cref="P:NetworkCommsDotNet.Tools.HostInfo.IP.RestrictLocalAddressRanges" /> has been set only returns matching addresses ordered in descending
            preference. i.e. Most preferred at [0].
            </summary>
            <param name="forceCacheUpdate">If true will refresh the cache and return latest result</param>
            <returns>
            </returns>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.IP.NetworkLoadUpdateWindowMS">
            <summary>
            The number of milliseconds over which to take an instance load (CurrentNetworkLoad) to be used in averaged
            values (AverageNetworkLoad). Default is 2000ms. Shorter values can be used but less than 200ms may cause significant
            errors in the value of returned value, especially in mono environments.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.IP.InterfaceLinkSpeed">
            <summary>
            The interface link speed in bits/sec used for network load calculations. Default is 100Mb/sec
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.IP.CurrentNetworkLoadIncoming">
            <summary>
            Returns the current instance network usage, as a value between 0 and 1. Returns the largest value for any available
            network adaptor. Triggers load analysis upon first call.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.HostInfo.IP.CurrentNetworkLoadOutgoing">
            <summary>
            Returns the current instance network usage, as a value between 0 and 1. Returns the largest value for any available network
            adaptor. Triggers load analysis upon first call.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.AverageNetworkLoadIncoming(System.Byte)">
            <summary>
            Returns the averaged value of CurrentNetworkLoadIncoming, as a value between 0 and 1, for a time window of up to 254 seconds.
            Triggers load analysis upon first call.
            </summary>
            <param name="secondsToAverage">Number of seconds over which historical data should be used to arrive at an average</param>
            <returns>Average network load as a double between 0 and 1</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.AverageNetworkLoadOutgoing(System.Byte)">
            <summary>
            Returns the averaged value of CurrentNetworkLoadIncoming, as a value between 0 and 1, for a time window of up to 254 seconds.
            Triggers load analysis upon first call.
            </summary>
            <param name="secondsToAverage">Number of seconds over which historical data should be used to arrive at an average</param>
            <returns>Average network load as a double between 0 and 1</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.ShutdownThreads(System.Int32)">
            <summary>
            Shutdown any background threads in the host tools
            </summary>
            <param name="threadShutdownTimeoutMS">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.HostInfo.IP.NetworkLoadWorker">
            <summary>
            Takes a network load snapshot (CurrentNetworkLoad) every NetworkLoadUpdateWindowMS
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.ILogger">
            <summary>
            The logging interface using by NetworkComms.Net. Implement an instance of this interface to enable your own
            customised logging.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Trace(System.String)">
            <summary>
            Log a trace message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Fatal(System.String)">
            <summary>
            Log a fatal message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Log a fatal message including an exception
            </summary>
            <param name="message">The message to log</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Info(System.String)">
            <summary>
            Log a info message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Error(System.String)">
            <summary>
            Log a error message
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ILogger.Shutdown">
            <summary>
            Shutdown the logger and release all resources.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.LiteLogger">
            <summary>
            A core logger that can be used to write log messages to the console and or a log file.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.LiteLogger.LogMode">
            <summary>
            The different log modes available in the lite logger
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.LiteLogger.LogMode.ConsoleOnly">
            <summary>
            Only log to the current console.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.LiteLogger.LogMode.LogFileOnly">
            <summary>
            Only log to an output file.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.LiteLogger.LogMode.ConsoleAndLogFile">
            <summary>
            Log to both the console and output file.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.LiteLogger.LogFileLocationName">
            <summary>
            The location and filename of the log file. Must be set to successfully log to a file
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.#ctor(NetworkCommsDotNet.Tools.LiteLogger.LogMode)">
            <summary>
            Initialise an instance of the core logger. If logging to a file also set LogFileLocationName.
            </summary>
            <param name="logMode">The log mode to use</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.#ctor(NetworkCommsDotNet.Tools.LiteLogger.LogMode,System.String)">
            <summary>
            Initialise an instance of the core logger
            </summary>
            <param name="logMode">The log mode to use</param>
            <param name="logFileLocationName">The log file location and name, i.e. logs/logFile.txt</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Trace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Fatal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Fatal(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LiteLogger.Shutdown">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.Tools.IPTools">
            <summary>
            A collection of tools for dealing with <see href="http://en.wikipedia.org/wiki/IP_address">IP addresses</see>.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPTools.GetIPv4NetworkBroadcastAddress(System.Net.IPAddress)">
            <summary>
            Returns the network broadcast address for the provided local IP address
            </summary>
            <param name="localIPAddress">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPTools.ParseEndPointFromString(System.String)">
            <summary>
            Converts an IPAddress in string form (IPv4 or IPv6) with an appended port number, e.g. 192.168.0.10:10000 or ::1:10000, into an <see cref="T:System.Net.IPEndPoint" />.
            </summary>
            <param name="ipAddressAndPort">The IP and Port to be parsed</param>
            <returns>The equivalent <see cref="T:System.Net.IPEndPoint" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPTools.BestLocalEndPoint(System.Net.IPEndPoint)">
            <summary>
            Determines the most appropriate local end point to contact the provided remote end point.
            Testing shows this method takes on average 1.6ms to return.
            </summary>
            <param name="remoteIPEndPoint">The remote end point</param>
            <returns>The selected local end point</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPTools.AttemptBestIPAddressGuess(System.Net.IPAddress)">
            <summary>
            Depreciated - . Attempts to guess the best local <see cref="T:System.Net.IPAddress" /> of this machine for accessing
            the provided target <see cref="T:System.Net.IPAddress" />. using the Windows API, to provided targets.
            This method is only supported in a Windows environment.
            </summary>
            <param name="targetIPAddress">The target IP which should be used to determine the best
            local address. e.g. Either a local network or public IP address.</param>
            <returns>Local <see cref="T:System.Net.IPAddress" /> which is best used to contact that provided target.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.IPRange">
            <summary>
            A class that encapsulates an IPv4 or IPv6 range.
            Used for checking if an IPAddress is within an IPRange.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.IPRange.numAddressBits">
            <summary>
            Number of most significant bits used for network-identifying portion of address.
            The remaining bits specify the host identifier.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.IPRange.addressBytes">
            <summary>
            IPAddress as bytes
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.IPRange.AutoAssignRanges">
            <summary>
            IPRanges associated with auto assigned addresses
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.#ctor(System.String)">
            <summary>
            Initialise an IPRange using the provided CIDR notation.
            </summary>
            <param name="rangeCIDR">IP range using CIDR notation, e.g. "192.168.1.0/24" contains 192.168.1.0 to 192.168.1.255</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Initialise an IPRange using the provided address and subnet mask.
            </summary>
            <param name="address">The address range to create</param>
            <param name="subnetmask">The subnet mask that specifies the network-identifying portion of the address</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.Contains(System.Net.IPAddress)">
            <summary>
            Returns true if this IPRange contains the provided IPAddress
            </summary>
            <param name="ipAddress">The IPAddress to check</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.Contains(System.String)">
            <summary>
            Returns true if this IPRange contains the provided IPAddress
            </summary>
            <param name="ipAddressStr">The IPAddress to check</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.Contains(System.Byte[])">
            <summary>
            Returns true if this IPRange contains the provided IPAddress bytes
            </summary>
            <param name="ipAddressBytes">The IPAddress bytes to check</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.AllAddressesInRange">
            <summary>
            Returns a list of all IPAddresses in the specified range
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.AllAddressesBetween(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Returns all IPAddresses that are between the provided addresses
            </summary>
            <param name="firstAddress">
            </param>
            <param name="lastAddress">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.RecursivePopulate(System.Byte[],System.Byte[],System.Byte[],System.Collections.Generic.List{System.Net.IPAddress})">
            <summary>
            Recursively populates the result list by looping over all address byte levels
            </summary>
            <param name="firstAddressBytes">
            </param>
            <param name="lastAddressBytes">
            </param>
            <param name="knownBytes">
            </param>
            <param name="result">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.Contains(System.Collections.Generic.IEnumerable{NetworkCommsDotNet.Tools.IPRange},System.Net.IPAddress)">
            <summary>
            Returns true if the provided IPAddress is within one of the provided IPRanges, otherwise false
            </summary>
            <param name="ranges">The ranges to search</param>
            <param name="ipAddress">The IPAddress to find in ranges</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.IsAutoAssignedAddress(System.Net.IPAddress)">
            <summary>
            Returns true if the provided IPAddress is within one of the autoassigned ip ranges, otherwise false
            </summary>
            <param name="ipAddress">The IPAddress to find in ranges</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.IPRange.ToString">
            <summary>
            Returns a clean ToString of the IPRange
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.LogTools">
            <summary>
            Quickly log exceptions and information to a file.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.LogTools.errorLocker">
            <summary>
            Locker for log methods which ensures threadSafe save outs.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LogTools.AppendStringToLogFile(System.String,System.String)">
            <summary>
            Appends the provided logString to end of fileName.txt. If the file does not exist it will be created.
            </summary>
            <param name="fileName">The filename to use. The extension .txt will be appended automatically</param>
            <param name="logString">The string to append.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.LogTools.LogException(System.Exception,System.String,System.String)">
            <summary>
            Logs the provided exception to a file to assist troubleshooting.
            </summary>
            <param name="ex">The exception to be logged</param>
            <param name="fileName">The filename to use. A time stamp and extension .txt will be appended automatically</param>
            <param name="optionalCommentStr">An optional string which will appear at the top of the error file</param>
            <returns>The entire fileName used.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.MD5Core">
            <summary>
            Part of the managed MD5 calculator
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHash(System.String,System.Text.Encoding)">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <param name="encoding">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHash(System.String)">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHashString(System.Byte[])">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHashString(System.String,System.Text.Encoding)">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <param name="encoding">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHashString(System.String)">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Core.GetHash(System.Byte[])">
            <summary>
            Return an MD5 hash for the provided parameters
            </summary>
            <param name="input">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.MD5Managed">
            <summary>
            Create a managed MD5 hash calculator
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Managed.#ctor">
            <summary>
            Create a new instance of the MD5 hash calculator
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Managed.Initialize">
            <summary>
            Initialise the MD5 hash calculator
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate the core hash
            </summary>
            <param name="array">
            </param>
            <param name="ibStart">
            </param>
            <param name="cbSize">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.MD5Managed.HashFinal">
            <summary>
            Get the final hash
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PacketBuilder">
            <summary>
            Packet data is generally broken into multiple variable sized byte chunks or 'partial packets'.
            This class provides features to effortlessly rebuild whole packets.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PacketBuilder.Locker">
            <summary>
            Locker object used for performing thread safe operations over this packet builder
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.#ctor">
            <summary>
            Create a new instance of the ConnectionPacketBuilder class
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PacketBuilder.TotalBytesCached">
            <summary>
            The total number of cached bytes. This is the sum of all bytes across all cached partial packets. See <see cref="P:NetworkCommsDotNet.Tools.PacketBuilder.TotalPartialPacketCount" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PacketBuilder.TotalPartialPacketCount">
            <summary>
            The total number of cached partial packets. This is different from <see cref="P:NetworkCommsDotNet.Tools.PacketBuilder.TotalBytesCached" /> because each partial packet may contain a variable number of bytes.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PacketBuilder.TotalBytesExpected">
            <summary>
            The total number of bytes required to rebuild the next whole packet.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.ClearNTopBytes(System.Int32)">
            <summary>
            Clear N bytes from cache, starting with oldest bytes first.
            </summary>
            <param name="numBytesToRemove">The total number of bytes to be removed.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.AddPartialPacket(System.Int32,System.Byte[])">
            <summary>
            Add a partial packet to the end of the cache by reference.
            </summary>
            <param name="packetBytes">The number of valid bytes in the provided partial packet</param>
            <param name="partialPacket">A buffer which may or may not be full with valid bytes</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.RemoveMostRecentPartialPacket(System.Int32@)">
            <summary>
            Returns the most recently cached partial packet and removes it from the cache.
            Used to more efficiently utilise allocated memory space.
            </summary>
            <param name="lastPacketBytesRead">The number of valid bytes in the last partial packet added</param>
            <returns>A byte[] corresponding with the last added partial packet</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.NumUnusedBytesMostRecentPartialPacket">
            <summary>
            Returns the number of unused bytes in the most recently cached partial packet.
            </summary>
            <returns>The number of unused bytes in the most recently cached partial packet.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.FirstByte">
            <summary>
            Returns the value of the first cached byte.
            </summary>
            <returns>The value of the first cached byte.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.GetAllData">
            <summary>
            Copies all cached bytes into a single array and returns. Original data is left unchanged.
            </summary>
            <returns>All cached data as a single byte[]</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketBuilder.ReadDataSection(System.Int32,System.Int32)">
            <summary>
            Copies the requested cached bytes into a single array and returns. Original data is left unchanged.
            </summary>
            <param name="startIndex">The inclusive byte index to use as the starting position.</param>
            <param name="length">The total number of desired bytes.</param>
            <returns>The requested bytes as a single array.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PacketTypeUnwrapper">
            <summary>
            Wrapper used to track the SendReceiveOptions for different packet types.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PacketTypeUnwrapper.Options">
            <summary>
            The SendReceiveOptions associated with this unwrapper.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PacketTypeUnwrapper.#ctor(System.String,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Initialise a new PacketTypeUnwrapper
            </summary>
            <param name="packetTypeStr">The packet type of this unwrapper</param>
            <param name="options">The SendReceiveOptions to use with this unwrapper</param>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.IPacketTypeHandlerDelegateWrapper">
            <summary>
            The following packetTypeHandlerDelegateWrappers are required so that we can do the totally general and awesome object cast on deserialise.
            If there is a way of achieving the same without these wrappers please let us know.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PeerDiscovery">
            <summary>
            Provides the ability to discover 'discoverable' peers on the local network.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PeerDiscovery.LocalListenMode">
            <summary>
            Encapsulates the different local listen modes. If the default mode does
            not work please try the others.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.LocalListenMode.EachAdaptorIndependently">
            <summary>
            Listens independently on each available adaptor for broadcast packets. This
            is the default mode and works on all native .net platforms.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.LocalListenMode.OnlyZeroAdaptor">
            <summary>
            Listens only on 0.0.0.0. This is required by some *nix/mobile systems.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.LocalListenMode.Both">
            <summary>
            Listens on all adaptors independently, as well as 0.0.0.0. Included only for ]
            debugging purposes.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod">
            <summary>
            Encapsulates the different peer discovery methods available.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod.UDPBroadcast">
            <summary>
            Peer discovery using a UDP broadcast. Strongly recommended for IP networks.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod.BluetoothSDP">
            <summary>
            Peer discovery using the bluetooth SDP protocol.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod.TCPPortScan">
            <summary>
            Peer discovery using a TCP port scan. Very slow and adversely affects performance on the local network.
            Should only be used with network configurations where UDP broadcast is unsuccessful. Only IPv4 networks
            are included in a TCP Port scan.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PeerDiscovery.PeerListenerEndPoint">
            <summary>
            Used to communicate discoverable listeners between peers
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.DefaultDiscoverTimeMS">
            <summary>
            The wait time in milliseconds before all peers discovered are returned for synchronous discovery methods. Default 2000ms.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.MinTargetLocalIPPort">
            <summary>
            The minimum port number that will be used when making this peer discoverable. Default 10000.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.MaxTargetLocalIPPort">
            <summary>
            The maximum port number that will be used when making this peer discoverable. Default 10020.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.ListenMode">
            <summary>
            The mode to use when listening for incoming peer discovery packets. Some systems require
            one mode whilst on others this will throw exceptions. If you have problems please
            use a different mode. Default is LocalListenMode.EachAdaptorIndependently
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._defaultIPDiscoveryMethod">
            <summary>
            Backing field for DefaultIPDiscoveryMethod
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.DefaultIPDiscoveryMethod">
            <summary>
            The default discovery method to use for IP type connections (UDP and TCP). By default this is DiscoveryMethod.UDPBroadcast.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PeerDiscovery.BluetoothDiscoveryService">
            <summary>
            The service on which discovery will run for bluetooth. Default is '3a768eea-cbda-4926-a82d-831cb89092ac'.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PeerDiscovery.PeerDiscoveredHandler">
            <summary>
            The event delegate which can optionally be used when a peer is successfully discovered.
            </summary>
            <param name="peerIdentifier">The ShortGuid corresponding with the discovered peers network identifier</param>
            <param name="discoveredListenerEndPoints">The discovered listener endPoints for the discovered peer</param>
        </member>
        <member name="E:NetworkCommsDotNet.Tools.PeerDiscovery.OnPeerDiscovered">
            <summary>
            Event triggered when a peer is discovered.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._syncRoot">
            <summary>
            A private object to ensure thread safety
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._discoverSyncRoot">
            <summary>
            A private object used to prevent parallel discovery requests being made
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery.discoveryPacketType">
            <summary>
            The packet type string used for peer discovery
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._discoveryListeners">
            <summary>
            Local listeners specifically associated with this peers discover feature
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._discoveredPeers">
            <summary>
            Dictionary which records discovered peers
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PeerDiscovery._tcpPortScanThreadPool">
            <summary>
            A custom thread pool for performing a TCPPortScan
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.EnableDiscoverable(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Make this peer discoverable using the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />.
            Uses all suitable and allowed adaptors, e.g. for IP networks uses <see cref="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses" />.
            IMPORTANT NOTE: For IP networks we strongly recommend using the UDP broadcast discovery method.
            </summary>
            <param name="discoveryMethod">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.EnableDiscoverable(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod,System.Net.EndPoint)">
            <summary>
            Make this peer discoverable using the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />.
            IMPORTANT NOTE: For IP networks we strongly recommend using the UDP broadcast discovery method.
            </summary>
            <param name="discoveryMethod">The discovery method for which this peer should be discoverable</param>
            <param name="localDiscoveryEndPoint">The local endpoint with which to make this peer discoverable</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DisableDiscoverable(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Disable this peers discoverable status for the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />.
            </summary>
            <param name="discoveryMethod">The <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" /> to disable discovery for.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DisableDiscoverable">
            <summary>
            Disable this peers discoverable status for all discovery methods.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.IsDiscoverable(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Returns true if local discovery endPoints exist for the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />.
            </summary>
            <param name="discoveryMethod">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.LocalDiscoveryEndPoints(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Returns the local endpoints that are currently used to make this peer discoverable using
            the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />.
            </summary>
            <param name="discoveryMethod">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.LocalDiscoveryEndPoints">
            <summary>
            Returns the local endpoints that are currently used to make this peer discoverable.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoverPeers(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Discover local peers using the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" /> and default discover time. Returns
            dictionary keyed on peer network identifier. IMPORTANT NOTE: For IP networks we strongly recommend using the UDP
            broadcast discovery method.
            </summary>
            <param name="discoveryMethod">The <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" /> to use for discovering peers.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoverPeers(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod,System.Int32)">
            <summary>
            Discover local peers using the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" />. Returns
            dictionary keyed on peer network identifier. IMPORTANT NOTE: For IP networks we strongly recommend using the UDP
            broadcast discovery method.
            </summary>
            <param name="discoveryMethod">The <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" /> to use for discovering peers.</param>
            <param name="discoverTimeMS">The wait time, after all requests have been made, in milliseconds before all discovered peers are returned.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoverPeersAsync(NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod)">
            <summary>
            Discover local peers using the provided <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoveryMethod" /> asynchronously. Makes a single async request
            for peers to announce. Ensure that you append to the OnPeerDiscovered event to handle discovered peers.
            IMPORTANT NOTE: For IP networks we strongly recommend using the UDP broadcast discovery method.
            </summary>
            <param name="discoveryMethod">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoverPeersUDP(System.Int32)">
            <summary>
            Discover peers using UDP broadcast
            </summary>
            <param name="discoverTimeMS">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DiscoverPeersTCP(System.Int32)">
            <summary>
            Discover peers using TCP port scan
            </summary>
            <param name="discoverTimeMS">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.PeerDiscoveryHandler(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connections.Connection,System.Byte[])">
            <summary>
            Handle the incoming peer discovery packet
            </summary>
            <param name="header">
            </param>
            <param name="connection">
            </param>
            <param name="data">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.SerializeLocalListenerList">
            <summary>
            Serializes the local listeners that are discoverable
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PeerDiscovery.DeserializeRemoteListenerList(System.Byte[],NetworkCommsDotNet.Tools.ShortGuid@)">
            <summary>
            Deserializes remote listeners that are discoverable
            </summary>
            <param name="data">
            </param>
            <param name="networkIdentifier">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PriorityQueue`1">
            <summary>
            Queue which contains features to add and remove items using a simple priority model.
            </summary>
            <typeparam name="TValue">The type of this queue</typeparam>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PriorityQueue`1.internalQueues">
            <summary>
            Each internal queue in the array represents a priority level.
            We keep the priority associated with each item so that when eventually returned the
            priority can be easily included.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PriorityQueue`1.QueueItemPriorityVals">
            <summary>
            The list of priorities used to handle incoming packets.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PriorityQueue`1.numDistinctPriorities">
            <summary>
            The number of queues we store internally.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.PriorityQueue`1.totalNumberQueuedItems">
            <summary>
            The total number of items currently in all queues
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.#ctor">
            <summary>
            Create a new instance of the priority queue.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.TryAdd(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.Tools.QueueItemPriority,`0})">
            <summary>
            Try adding an item to the priority queue.
            </summary>
            <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
            <returns>True if an item was successfully added to the queue</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.TryTake(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.Tools.QueueItemPriority,`0}@)">
            <summary>
            Try removing an item from the priority queue
            </summary>
            <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
            <returns>True if an item was successfully removed from the queue</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.TryTake(NetworkCommsDotNet.Tools.QueueItemPriority,System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.Tools.QueueItemPriority,`0}@)">
            <summary>
            Try removing an item from the priority queue which has a priority of at least that provided.
            </summary>
            <param name="minimumPriority">The minimum priority to consider</param>
            <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
            <returns>True if an item was successfully removed from the queue</returns>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PriorityQueue`1.Count">
            <summary>
            The total number of items currently queued.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.CopyTo(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.Tools.QueueItemPriority,`0}[],System.Int32)">
            <summary>
            Copies queued items into the provided destination array. Highest priority items first descending until
            destination is full or there are no remaining items.
            </summary>
            <param name="destination">The destination array</param>
            <param name="destStartingIndex">The position within destination to start copying to</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.ToArray">
            <summary>
            Returns all queued items as a 1D array. Highest priority items first descending.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PriorityQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the PriorityQueue is synchronized (thread safe). Always returns true.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.PriorityQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the PriorityQueue. Throws an exception as all access is explicitly thread safe.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueue`1.Clear">
            <summary>
            Clear the content of all queues
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.PriorityQueueItem">
            <summary>
            Private wrapper class used for passing data to the incoming packet item worker
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.PriorityQueueItem.#ctor(NetworkCommsDotNet.Tools.QueueItemPriority,NetworkCommsDotNet.Connections.Connection,NetworkCommsDotNet.PacketHeader,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Initialise a new PriorityQueueItem
            </summary>
            <param name="priority">
            </param>
            <param name="connection">
            </param>
            <param name="packetHeader">
            </param>
            <param name="dataStream">
            </param>
            <param name="sendReceiveOptions">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.QueueItemPriority">
            <summary>
            A list of priorities used to handle incoming packets
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.QueueItemPriority.Lowest">
            <summary>
            The System.Threading.Thread can be scheduled after threads with any other priority.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.QueueItemPriority.BelowNormal">
            <summary>
            The System.Threading.Thread can be scheduled after threads with Normal priority and before those with Lowest priority.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.QueueItemPriority.Normal">
            <summary>
            The System.Threading.Thread can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.QueueItemPriority.AboveNormal">
            <summary>
            The System.Threading.Thread can be scheduled after threads with Highest priority and before those with Normal priority.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.QueueItemPriority.Highest">
            <summary>
            The System.Threading.Thread can be scheduled before threads with any other priority.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.ShortGuid">
            <summary>
            Represents a shortform globally unique identifier (<see href="http://en.wikipedia.org/wiki/Globally_unique_identifier">GUID</see>) which is easier to handle than Guid.NewGuid().
            This class is used to uniquely identify a peer/application using NetworkComms.Net.
            See <see href="http://www.singular.co.nz/blog/archive/2007/12/20/shortguid-a-shorter-and-url-friendly-guid-in-c-sharp.aspx">here</see> for original source.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.ShortGuid.Empty">
            <summary>
            A read-only instance of the ShortGuid class whose value
            is guaranteed to be all zeroes.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">The encoded guid as a
            base64 string</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a
            specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.NewGuid">
            <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.Encode(System.String)">
            <summary>
            Creates a new instance of a Guid using the string value,
            then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22
            characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Equality(NetworkCommsDotNet.Tools.ShortGuid,NetworkCommsDotNet.Tools.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying
            Guid value.
            </summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Inequality(NetworkCommsDotNet.Tools.ShortGuid,NetworkCommsDotNet.Tools.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the
            same underlying Guid value.
            </summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Implicit(NetworkCommsDotNet.Tools.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
            <param name="shortGuid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Implicit(NetworkCommsDotNet.Tools.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
            <param name="shortGuid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Implicit(System.String)~NetworkCommsDotNet.Tools.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.ShortGuid.op_Implicit(System.Guid)~NetworkCommsDotNet.Tools.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid
            </summary>
            <param name="guid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.CertificateDetails">
            <summary>
            Contains the information required to create self signed certificates
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CertificateDetails.X500">
            <summary>
            Certificate "distinguished name". An example is "CN='My Certificate'; C='USA'".
            Please see http://msdn.microsoft.com/en-us/library/aa377160 and http://en.wikipedia.org/wiki/X.509 for more information.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CertificateDetails.StartTime">
            <summary>
            Certificate validity start DateTime
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CertificateDetails.EndTime">
            <summary>
            Certificate validity end DateTime
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CertificateDetails.Password">
            <summary>
            Password for encrypting the key data
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.CertificateDetails.KeyLength">
            <summary>
            The key length to be generated. Default is 1024. Minimum is 384. maximum is 16384.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CertificateDetails.#ctor(System.String,System.DateTime,System.DateTime,System.Security.SecureString)">
            <summary>
            Initialise certificate details.
            </summary>
            <param name="x500">Certificates "distinguished name". An example is "CN='My Certificate'; C='USA'".
            Please see http://msdn.microsoft.com/en-us/library/aa377160 and http://en.wikipedia.org/wiki/X.509 for more information.</param>
            <param name="startTime">Certificate validity start DateTime</param>
            <param name="endTime">Certificate validity end DateTime</param>
            <param name="password">Password for encrypting the key data</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CertificateDetails.#ctor(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Initialise certificate details.
            </summary>
            <param name="x500">Certificates "distinguished name". An example is "CN='My Certificate'; C='USA'".
            Please see http://msdn.microsoft.com/en-us/library/aa377160 and http://en.wikipedia.org/wiki/X.509 for more information.</param>
            <param name="startTime">Certificate validity start DateTime</param>
            <param name="endTime">Certificate validity end DateTime</param>
            <param name="insecurePassword">Password for encrypting the key data</param>
            <returns>PFX file data</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CertificateDetails.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise certificate details.
            </summary>
            <param name="x500">Certificates "distinguished name". An example is "CN='My Certificate'; C='USA'".
            Please see http://msdn.microsoft.com/en-us/library/aa377160 and http://en.wikipedia.org/wiki/X.509 for more information.</param>
            <param name="startTime">Certificate validity start DateTime</param>
            <param name="endTime">Certificate validity end DateTime</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.CertificateDetails.Dispose">
            <summary>
            Dispose of the secure string password
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.StreamTools">
            <summary>
            Wrapper class for writing to streams with time-outs. Used primarily to prevent stream write deadlocks.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.Write(System.Byte[],System.Int32,System.Int32,System.IO.Stream,System.Int32,System.Double,System.Int32)">
            <summary>
            Write the provided sendbuffer to the destination stream in chunks of writeBufferSize. Throws exception if any write takes longer than timeoutPerByteWriteMS.
            </summary>
            <param name="sendBuffer">Buffer containing data to write</param>
            <param name="inputStart">The start position in sendBuffer</param>
            <param name="bufferLength">The number of bytes to write</param>
            <param name="destinationStream">The destination stream</param>
            <param name="writeBufferSize">The size in bytes of each successive write</param>
            <param name="timeoutMSPerKBWrite">The maximum time to allow for write to complete per KB</param>
            <param name="minTimeoutMS">The minimum time to allow for any sized write</param>
            <returns>The average time in milliseconds per KB written</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.Write(System.IO.Stream,System.Int64,System.Int64,System.IO.Stream,System.Int32,System.Double,System.Int32)">
            <summary>
            Write the provided input stream to the destination stream in chunks of writeBufferSize. Throws exception if any write takes longer than timeoutPerByteWriteMS.
            </summary>
            <param name="inputStream">Input stream containing data to send</param>
            <param name="inputStart">The start position in inputStream</param>
            <param name="inputLength">The number of bytes to write</param>
            <param name="destinationStream">The destination stream</param>
            <param name="writeBufferSize">The size in bytes of each successive write, recommended 8K</param>
            <param name="timeoutMSPerKBWrite">The maximum time to allow for write to complete per KB</param>
            <param name="minTimeoutMS">The minimum time to wait per write, this takes priority over other values.</param>
            <returns>The average time in milliseconds per KB written</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.Write(System.IO.Stream,System.IO.Stream)">
            <summary>
            Write the provided input stream to the destination stream
            </summary>
            <param name="inputStream">Input stream containing data to send</param>
            <param name="destinationStream">The destination stream</param>
            <returns>The average time in milliseconds per KB written</returns>
        </member>
        <member name="F:NetworkCommsDotNet.Tools.StreamTools.errorLocker">
            <summary>
            Locker for LogError() which ensures thread safe saves.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.AppendStringToLogFile(System.String,System.String)">
            <summary>
            Appends the provided logString to end of fileName.txt. If the file does not exist it will be created.
            </summary>
            <param name="fileName">The filename to use. The extension .txt will be appended automatically</param>
            <param name="logString">The string to append.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.MD5(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Return the MD5 hash of the provided memory stream as a string. Stream position will be equal to the length of stream on
            return, this ensures the MD5 is consistent.
            </summary>
            <param name="streamToMD5">The bytes which will be checksummed</param>
            <param name="start">The start position in the stream</param>
            <param name="length">The length in the stream to MD5</param>
            <returns>The MD5 checksum as a string</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.MD5(System.Byte[])">
            <summary>
            Return the MD5 hash of the provided byte array as a string
            </summary>
            <param name="bytesToMd5">The bytes which will be checksummed</param>
            <returns>The MD5 checksum as a string</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.MD5(System.IO.Stream)">
            <summary>
            Return the MD5 hash of the provided memory stream as a string. Stream position will be equal to the length of stream on
            return, this ensures the MD5 is consistent.
            </summary>
            <param name="streamToMD5">The bytes which will be checksummed</param>
            <returns>The MD5 checksum as a string</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper">
            <summary>
            Used to send all or parts of a stream. Particularly useful for sending files directly from disk etc.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.ThreadSafeStream">
            <summary>
            The wrapped stream
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.Start">
            <summary>
            The start position to read from Stream
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.Length">
            <summary>
            The number of bytes to read from Stream
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.#ctor(NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream)">
            <summary>
            Create a new stream wrapper and set Start and Length to encompass the entire Stream
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.#ctor(NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream,System.Int64,System.Int64)">
            <summary>
            Create a new stream wrapper
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="start">The start position from where to read data</param>
            <param name="length">The length to read</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.MD5CheckSum">
            <summary>
            Return the MD5 for the specific part of the stream only.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper.Dispose">
            <summary>
            Dispose the internal ThreadSafeStream
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream">
            <summary>
            A wrapper around a stream to ensure it can be accessed in a thread safe way. The .net implementation of Stream.Synchronized is not suitable on its own.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.DiposeInnerStreamOnDispose">
            <summary>
            If true the internal stream will be disposed once the data has been written to the network
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.#ctor(System.IO.Stream)">
            <summary>
            Create a thread safe stream. Once any actions are complete the stream must be correctly disposed by the user.
            </summary>
            <param name="stream">The stream to make thread safe</param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a thread safe stream.
            </summary>
            <param name="stream">The stream to make thread safe.</param>
            <param name="closeStreamAfterSend">If true the provided stream will be disposed once data has been written to the network. If false the stream must be disposed of correctly by the user</param>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Length">
            <summary>
            The total length of the internal stream
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Position">
            <summary>
            The current position of the internal stream
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.ToArray(System.Int32)">
            <summary>
            Returns data from entire Stream
            </summary>
            <param name="numberZeroBytesPrefex">If non zero will append N 0 value bytes to the start of the returned array</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.ToArray(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Returns data from the specified portion of Stream
            </summary>
            <param name="start">The start position of the desired bytes</param>
            <param name="length">The total number of desired bytes, not including the zero byte prefix and append parameters</param>
            <param name="numberZeroBytesPrefix">If non zero will append N 0 value bytes to the start of the returned array</param>
            <param name="numberZeroBytesAppend">If non zero will append N 0 value bytes to the end of the returned array</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.MD5">
            <summary>
            Return the MD5 hash of the current <see cref="T:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream" /> as a string
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.MD5(System.Int64,System.Int32)">
            <summary>
            Return the MD5 hash of part of the current <see cref="T:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream" /> as a string
            </summary>
            <param name="start">The start position in the stream</param>
            <param name="length">The length of stream to MD5</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Write(System.Byte[],System.Int64)">
            <summary>
            Writes the provided buffer to the internal stream starting at the provided position within the internal stream
            </summary>
            <param name="buffer">
            </param>
            <param name="startPosition">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.CopyTo(System.IO.Stream,System.Int64,System.Int64,System.Int32,System.Double,System.Int32)">
            <summary>
            Copies data specified by start and length properties from internal stream to the provided stream.
            </summary>
            <param name="destinationStream">The destination stream to write to</param>
            <param name="startPosition">
            </param>
            <param name="length">
            </param>
            <param name="writeBufferSize">The buffer size to use for copying stream contents</param>
            <param name="minTimeoutMS">The minimum time allowed for any sized copy</param>
            <param name="timeoutMSPerKBWrite">The timouts in milliseconds per KB to write</param>
            <returns>The average time in milliseconds per byte written</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.GetBuffer">
            <summary>
            Attempts to return the buffer associated with the internal stream. In certain circumstances this is more efficient
            than copying the stream contents into a new buffer using ToArray. If the internal stream is not a memory stream
            will throw InvalidCastException. If access to the buffer is not allowed will throw an UnauthorizedAccessException.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Dispose">
            <summary>
            Disposes the internal stream if <see cref="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.DiposeInnerStreamOnDispose" /> is true.
            Use Close() to close the inner stream regardless of <see cref="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.DiposeInnerStreamOnDispose" />.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Dispose(System.Boolean)">
            <summary>
            Disposes the internal stream. If <see cref="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.DiposeInnerStreamOnDispose" /> is false, forceDispose
            must be true to dispose of the internal stream.
            </summary>
            <param name="forceDispose">If true the internal stream will be disposed regardless of <see cref="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.DiposeInnerStreamOnDispose" /> value.</param>
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Tools.StreamTools.ThreadSafeStream.Flush">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.Connections.Connection">
            <summary>
            Global connection base class for NetworkComms.Net. Most user interactions happen using a connection object.
            Extended by <see cref="!:TCPConnection" />, <see cref="!:UDPConnection" /> and <see cref="!:NetworkCommsDotNet.Connections.Bluetooth.BluetoothConnection" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.ConnectionInfo">
            <summary>
            Connection information related to this connection.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.connectionSetupWait">
            <summary>
            A manual reset event which can be used to handle connection setup and establish.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.connectionEstablishWait">
            <summary>
            A manual reset event which can be used to handle connection setup and establish.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.connectionSetupException">
            <summary>
            A boolean used to signal a connection setup exception.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.connectionSetupExceptionStr">
            <summary>
            If <see cref="F:NetworkCommsDotNet.Connections.Connection.connectionSetupException" /> is true provides additional exception information.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Create a new connection object
            </summary>
            <param name="connectionInfo">ConnectionInfo corresponding to the new connection</param>
            <param name="defaultSendReceiveOptions">The SendReceiveOptions which should be used as connection defaults</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.EstablishConnection">
            <summary>
            Establish this connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.EstablishConnectionSpecific">
            <summary>
            Any connection type specific establish tasks. Should call at least ConnectionHandshake() or TriggerConnectionEstablishDelegates();
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionHandshake">
            <summary>
            Performs a connection handshake with the remote end of the connection.
            Exchanges network identifier and any listener whose IPAddress matches the connection localEndPoint IPAddress.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.TriggerConnectionEstablishDelegates">
            <summary>
            Trigger connection establish delegates.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.WaitForConnectionEstablish(System.Int32)">
            <summary>
            Return true if the connection is established within the provided timeout, otherwise false
            </summary>
            <param name="waitTimeoutMS">Wait time in milliseconds before returning</param>
            <returns>True if the wait was triggered, false otherwise after the provided timeout.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionSetupHandler(System.IO.MemoryStream)">
            <summary>
            Handle an incoming ConnectionSetup packet type
            </summary>
            <param name="packetDataSection">Serialised handshake data</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionSetupHandlerFinal(NetworkCommsDotNet.ConnectionInfo,System.Boolean@,NetworkCommsDotNet.Connections.Connection@)">
            <summary>
            Attempts to complete the connection establish with a minimum of locking to avoid possible deadlocking
            </summary>
            <param name="remoteConnectionInfo">
                <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> corresponding with remoteEndPoint</param>
            <param name="possibleClashWithExistingConnection">True if a connection already exists with provided remoteEndPoint</param>
            <param name="existingConnection">A reference to an existing connection if it exists</param>
            <returns>True if connection is successfully setup, otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ToString">
            <summary>
            Returns ConnectionInfo.ToString
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection._syncRoot">
            <summary>
            Thread safety locker which is used when accessing <see cref="F:NetworkCommsDotNet.Connections.Connection.incomingPacketHandlers" />,
            <see cref="F:NetworkCommsDotNet.Connections.Connection.incomingPacketUnwrappers" /> and <see cref="P:NetworkCommsDotNet.Connections.Connection.ConnectionSpecificShutdownDelegate" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.SyncRoot">
            <summary>
            Connection level SyncRoot which can be used to perform multiple thread safe operations on this connection
            external to NetworkComms.Net
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.ConnectionDefaultSendReceiveOptions">
            <summary>
            The default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> used for this connection
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.ConnectionSpecificShutdownDelegate">
            <summary>
            A multicast function delegate for maintaining connection specific shutdown delegates
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.incomingPacketUnwrappers">
            <summary>
            By default all incoming objects are handled using ConnectionDefaultSendReceiveOptions. Should the user want something else
            those settings are stored here
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.incomingPacketHandlers">
            <summary>
            A connection specific incoming packet handler dictionary. These are called before any global handlers
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingPacketSendReceiveOptions(NetworkCommsDotNet.PacketHeader)">
            <summary>
            Returns the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided <see cref="T:NetworkCommsDotNet.PacketHeader" />. Ensures there
            will not be a serializer or data processor clash for different delegate levels.
            </summary>
            <param name="header">The <see cref="T:NetworkCommsDotNet.PacketHeader" /> options are desired.</param>
            <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.GetPacketHandlerWrappers(System.String)">
            <summary>
            Gets packet handler wrappers for a given packet type
            </summary>
            <param name="packetTypeStr">The packet type to get handler wrappers for</param>
            <returns>The packet handler wrappers associated with the packet type supplied</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.TriggerSpecificPacketHandlers(NetworkCommsDotNet.PacketHeader,System.Object)">
            <summary>
            Trigger connection specific packet delegates with the provided parameters. Returns true if connection specific handlers were executed.
            </summary>
            <param name="packetHeader">The packetHeader for which all delegates should be triggered with</param>
            <param name="returnObject">The deserialised payload object</param>
            <returns>Returns true if connection specific handlers were executed.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.PacketTypeUnwrapperOptions(System.String)">
            <summary>
            Returns the packet type sendReceiveOptions possibly used to unwrap incoming data. If no specific options are registered returns null
            </summary>
            <param name="packetTypeStr">The packet type for which the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> are required.</param>
            <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> otherwise null</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AppendIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Append a connection specific packet handler using the connection default SendReceiveOptions
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AppendIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0},NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Append a connection specific packet handler
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided packet type</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AppendIncomingPacketHandler(System.String,NetworkCommsDotNet.Tools.IPacketTypeHandlerDelegateWrapper,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Append a connection specific packet handler which has already been wrapped by IPacketTypeHandlerDelegateWrapper
            </summary>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgateWrapper">The IPacketTypeHandlerDelegateWrapper to be executed when a packet of packetTypeStr is received</param>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided packet type</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AppendIncomingUnmanagedPacketHandler(NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{System.Byte[]})">
            <summary>
            Append a connection specific unmanaged packet handler
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when an unmanaged packet is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingPacketHandlerExists(System.String)">
            <summary>
            Returns true if an unmanaged packet handler exists on this connection
            </summary>
            <param name="packetTypeStr">The packet type for which to check incoming packet handlers</param>
            <returns>True if a packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingUnmanagedPacketHandlerExists">
            <summary>
            Returns true if a connection specific unmanaged packet handler exists, on this connection.
            </summary>
            <returns>True if an unmanaged packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingPacketHandlerExists(System.String,System.Delegate)">
            <summary>
            Returns true if the provided connection specific packet handler has been added for the provided packet type, on this connection.
            </summary>
            <param name="packetTypeStr">The packet type within which to check packet handlers</param>
            <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
            <returns>True if a connection specific packet handler exists for the provided packetType</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingUnmanagedPacketHandlerExists(System.Delegate)">
            <summary>
            Returns true if the provided connection specific unmanaged packet handler has been added, on this connection.
            </summary>
            <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
            <returns>True if a connection specific unmanaged packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveIncomingPacketHandler(System.String,System.Delegate)">
            <summary>
            Remove the provided connection specific packet handler for the specified packet type, on this connection.
            </summary>
            <param name="packetTypeStr">Packet type for which this delegate should be removed</param>
            <param name="packetHandlerDelgatePointer">The delegate to remove</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveIncomingUnmanagedPacketHandler(System.Delegate)">
            <summary>
            Remove the provided connection specific unmanaged packet handler, on this connection.
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to remove</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveIncomingPacketHandler(System.String)">
            <summary>
            Removes all connection specific packet handlers for the provided packet type, on this connection.
            </summary>
            <param name="packetTypeStr">Packet type for which all delegates should be removed</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveIncomingUnmanagedPacketHandler">
            <summary>
            Removes all unmanaged packet handlers, on this connection.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveIncomingPacketHandler">
            <summary>
            Removes all packet handlers for all packet types, on this connection.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AppendShutdownHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
            <summary>
            Add a connection specific shutdown delegate
            </summary>
            <param name="handlerToAppend">The delegate to call when a connection is shutdown</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.RemoveShutdownHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
            <summary>
            Remove a connection specific shutdown delegate.
            </summary>
            <param name="handlerToRemove">The delegate to remove for shutdown events</param>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.packetBuilder">
            <summary>
            The <see cref="T:NetworkCommsDotNet.Tools.PacketBuilder" /> for this connection
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.totalBytesRead">
            <summary>
            The total bytes read so far within dataBuffer
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.incomingDataListenThread">
            <summary>
            The thread listening for incoming data should we be using synchronous methods.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.asyncListenStarted">
            <summary>
            True if async listen has started
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.asyncListenerInRead">
            <summary>
            True if the async listen method is in a beginRead
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StartIncomingDataListen">
            <summary>
            A connection specific method which triggers any requisites for accepting incoming data
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.IncomingPacketHandleHandOff(NetworkCommsDotNet.Tools.PacketBuilder)">
            <summary>
            Attempts to use the data provided in packetBuilder to recreate something useful. If we don't have enough data
            yet that value is set in packetBuilder.
            </summary>
            <param name="packetBuilder">The <see cref="T:NetworkCommsDotNet.Tools.PacketBuilder" /> containing incoming cached data</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.CheckSumFailResendHandler(System.IO.MemoryStream)">
            <summary>
            Handle an incoming CheckSumFailResend packet type
            </summary>
            <param name="packetDataSection">
            </param>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.listenersDict">
            <summary>
            All connection listeners are recorded in the static connection base.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StartListening``1(NetworkCommsDotNet.Connections.ConnectionType,``0,System.Boolean)">
            <summary>
            Start listening for incoming connections of the provided <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" />.
            If the desired localEndPoint is not available will throw a CommsSetupShutdownException.
            </summary>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> to start listening for.</param>
            <param name="desiredLocalEndPoint">The desired localEndPoint. For IPEndPoints use IPAddress.Any
            to listen on all <see cref="M:NetworkCommsDotNet.Tools.HostInfo.IP.FilteredLocalAddresses" /> and port 0 to randomly select an available port.</param>
            <param name="allowDiscoverable">Determines if the listeners created will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
            <returns>A list of all listeners used.</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StartListening``1(NetworkCommsDotNet.Connections.ConnectionListenerBase,``0,System.Boolean)">
            <summary>
            Start listening for new incoming connections on specified <see cref="T:System.Net.IPEndPoint" />. Inspect listener.LocalListenIPEndPoint
            when method returns to determine the <see cref="T:System.Net.IPEndPoint" /> used.
            </summary>
            <param name="listener">The listener to use.</param>
            <param name="desiredLocalEndPoint">The desired local <see cref="T:System.Net.IPEndPoint" /> to use for listening. IPAddress.Any corresponds with listening on
            0.0.0.0. Use a port number of 0 to dynamically select a port.</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random.
            If false and provided port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StartListening``1(System.Collections.Generic.List{NetworkCommsDotNet.Connections.ConnectionListenerBase},System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Start listening for new incoming connections on specified <see cref="T:System.Net.IPEndPoint" />s. Listener is matched
            with desired localIPEndPoint based on List index. Inspect listener.LocalListenIPEndPoint
            when method returns to determine the <see cref="T:System.Net.IPEndPoint" />s used.
            </summary>
            <param name="listeners">The listeners to use.</param>
            <param name="desiredLocalEndPoints">The desired local <see cref="T:System.Net.IPEndPoint" />s to use for listening. IPAddress.Any corresponds with listening on
            0.0.0.0. Use a port number of 0 to dynamically select a port.</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random.
            If false and provided port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StopListening">
            <summary>
            Stops all local listeners
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StopListening(NetworkCommsDotNet.Connections.ConnectionType)">
            <summary>
            Stops all local listeners of the provided <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" />.
            </summary>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> to close.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StopListening(NetworkCommsDotNet.Connections.ConnectionListenerBase)">
            <summary>
            Stop listening for new incoming connections on specified <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> and remove it from the local listeners dictionary.
            </summary>
            <param name="listener">The listener which should stop listening.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StopListening(System.Collections.Generic.List{NetworkCommsDotNet.Connections.ConnectionListenerBase})">
            <summary>
            Stop listening for new incoming connections on specified list of <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> and remove them from the local listeners dictionary.
            </summary>
            <param name="listeners">The listeners which should stop listening</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.StopListening(NetworkCommsDotNet.Connections.ConnectionType,System.Net.EndPoint)">
            <summary>
            Stop listening for new incoming connections on specified <see cref="T:System.Net.EndPoint" /> and remove it from the local listeners dictionary.
            </summary>
            <param name="connectionType">The connection type to stop listening on.</param>
            <param name="localEndPointToClose">The local <see cref="T:System.Net.EndPoint" /> to stop listening for connections on.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.Listening(NetworkCommsDotNet.Connections.ConnectionType)">
            <summary>
            Returns true if at least one local listener of the provided <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> exists.
            </summary>
            <param name="connectionType">The <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> to check.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AllExistingLocalListenEndPoints">
            <summary>
            Returns a dictionary corresponding to all current local listeners. Key is connection type, value is local EndPoint of listener.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ExistingLocalListenEndPoints(NetworkCommsDotNet.Connections.ConnectionType)">
            <summary>
            Returns a list of <see cref="T:System.Net.EndPoint" />s corresponding to possible local listeners of the provided
            <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" />. If no listeners exist returns empty list.
            </summary>
            <param name="connectionType">The connection type to match. Use ConnectionType.Undefined to match all.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ExistingLocalListenEndPoints(NetworkCommsDotNet.Connections.ConnectionType,System.Net.EndPoint)">
            <summary>
            Returns a list of <see cref="T:System.Net.EndPoint" /> corresponding to possible local listeners of the provided
            <see cref="T:NetworkCommsDotNet.Connections.ConnectionType" /> with a local EndPoint with matching <see cref="T:System.Net.IPAddress" />.
            If no matching listeners exist returns empty list.
            </summary>
            <param name="connectionType">Connection type to match. Use ConnectionType.Undefined to match all.</param>
            <param name="localEndPointToMatch">The <see cref="T:System.Net.IPEndPoint" /> to match to local listeners. Use IPAddress.Any
            to match all addresses. Use port 0 to match all ports.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ExistingLocalListeners``1(System.Net.EndPoint)">
            <summary>
            Returns a list of requested existing local listeners.
            </summary>
            <typeparam name="listenerType">Type of listener to return.</typeparam>
            <param name="endPointToMatch">The <see cref="T:System.Net.EndPoint" /> to match to local listeners. Use IPAddress.Any to match all
            addresses. Use port 0 to match all ports.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AllExistingLocalListeners">
            <summary>
            Returns a list of all local listeners
            </summary>
            <returns>A list of all local listeners</returns>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.sendLocker">
            <summary>
            Lockers for maintaining thread safe operation
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.SendTimesMSPerKBCache">
            <summary>
            A NetworkComms.Net math object for tracking send times. Used to prevent send deadlocks.
            Initialised at 1000 milliseconds per KB write speed, corresponding with 1KB / second.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.packetSequenceCounter">
            <summary>
            A counter which is incremented during every a send. The current value is included in the header of all sent packets.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.Connection.sentPacketsLocker">
            <summary>
            Maintains a list of sent packets for the purpose of confirmation and possible resends.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendUnmanagedBytes(System.Byte[])">
            <summary>
            Send bytes on an unmanaged connection
            </summary>
            <param name="bytesToSend">The bytes to send</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject``1(System.String,``0)">
            <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject``1(System.String,``0,System.Int64@)">
            <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send</param>
            <param name="packetSequenceNumber">The sequence number of the packet sent</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject``1(System.String,``0,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Send an object using the provided SendReceiveOptions
            </summary>
            <param name="sendingPacketType">The packet type to use for send</param>
            <param name="objectToSend">The object to send</param>
            <param name="options">Send specific <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject``1(System.String,``0,NetworkCommsDotNet.SendReceiveOptions,System.Int64@)">
            <summary>
            Send an object using the provided SendReceiveOptions
            </summary>
            <param name="sendingPacketType">The packet type to use for send</param>
            <param name="objectToSend">The object to send</param>
            <param name="options">Send specific <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></param>
            <param name="packetSequenceNumber">The sequence number of the packet sent</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject(System.String)">
            <summary>
            Send an empty packet using the provided packetType. Useful for signalling.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendObject(System.String,System.Int64@)">
            <summary>
            Send an empty packet using the provided packetType. Useful for signalling.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="packetSequenceNumber">The sequence number of the packet sent</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``2(System.String,System.String,System.Int32,``0)">
            <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object
            again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
            <typeparam name="sendObjectType">The sending object type, i.e. string, int[], etc</typeparam>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received
            will throw an ExpectedReturnTimeoutException.</param>
            <param name="sendObject">The object to send</param>
            <returns>The requested return object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``2(System.String,System.String,System.Int32,``0,System.Int64@)">
            <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again
            using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
            <typeparam name="sendObjectType">The sending object type, i.e. string, int[], etc</typeparam>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will
            throw an ExpectedReturnTimeoutException.</param>
            <param name="sendObject">The object to send</param>
            <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
            <returns>The requested return object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``2(System.String,System.String,System.Int32,``0,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Send an object using the provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object using provided
            <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
            <typeparam name="sendObjectType">The sending object type, i.e. string, int[], etc</typeparam>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will
            throw an ExpectedReturnTimeoutException.</param>
            <param name="sendObject">The object to send</param>
            <param name="sendOptions">SendReceiveOptions to use when sending</param>
            <param name="receiveOptions">SendReceiveOptions used when receiving the return object</param>
            <returns>The requested return object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``2(System.String,System.String,System.Int32,``0,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.SendReceiveOptions,System.Int64@)">
            <summary>
            Send an object using the provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object using provided
            <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
            <typeparam name="sendObjectType">The sending object type, i.e. string, int[], etc</typeparam>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will
            throw an ExpectedReturnTimeoutException.</param>
            <param name="sendObject">The object to send</param>
            <param name="sendOptions">SendReceiveOptions to use when sending</param>
            <param name="receiveOptions">SendReceiveOptions used when receiving the return object</param>
            <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
            <returns>The requested return object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``1(System.String,System.String,System.Int32)">
            <summary>
            Send an empty packet using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again
            using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />. Useful to request an object when there is no need to send anything.
            </summary>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw
            an ExpectedReturnTimeoutException.</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Int64@)">
            <summary>
            Send an empty packet using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />. Usefull to request an object when there is no need to send anything.
            </summary>
            <typeparam name="returnObjectType">The type of return object</typeparam>
            <param name="sendingPacketTypeStr">The sending packet type</param>
            <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
            <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
            <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.CloseConnection(System.Boolean,System.Int32)">
            <summary>
            Closes the connection and trigger any associated shutdown delegates.
            </summary>
            <param name="closeDueToError">Closing a connection due an error possibly requires a few extra steps.</param>
            <param name="logLocation">Optional debug parameter.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.CloseConnectionSpecific(System.Boolean,System.Int32)">
            <summary>
            Every connection will probably have to perform connection specific shutdown tasks. This is called before the global
            connection close tasks.
            </summary>
            <param name="closeDueToError">Closing a connection due an error possibly requires a few extra steps.</param>
            <param name="logLocation">Optional debug parameter for determining the location of the close.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionAlive">
            <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call
            within the default <see cref="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS" /></summary>
            <returns>True if the remote end responds within <see cref="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS" /> otherwise false</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionAlive(System.Int32)">
            <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call
            within the provided aliveRespondTimeoutMS.
            </summary>
            <param name="aliveRespondTimeoutMS">The time to wait in milliseconds before returning false</param>
            <returns>True if the remote end responds within the provided aliveRespondTimeoutMS</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionAlive(System.Int32,System.Int64@)">
            <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call
            within the provided aliveRespondTimeoutMS
            </summary>
            <param name="aliveRespondTimeoutMS">The time to wait in milliseconds before returning false</param>
            <param name="responseTimeMS">The number of milliseconds taken for a successful response to be received</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendPacket``1(NetworkCommsDotNet.IPacket)">
            <summary>
            Send the provided packet to the remoteEndPoint. Waits for receive confirmation if required.
            </summary>
            <typeparam name="packetPayloadObjectType">The type of object encapsulated by the provided packet</typeparam>
            <param name="packet">The packet to send</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendPacket``1(NetworkCommsDotNet.IPacket,System.Int64@)">
            <summary>
            Send the provided packet to the remoteEndPoint. Waits for receive confirmation if required.
            </summary>
            <typeparam name="packetPayloadObjectType">The type of object encapsulated by the provided packet</typeparam>
            <param name="packet">The packet to send</param>
            <param name="packetSequenceNumber">The sequence number of the packet sent</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendNullPacket">
            <summary>
            Implementation for sending a null packets on this connection type. Used for ensuring a connection
            is not terminated by an intermediary switch/router due to inactivity.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendPacketSpecific(NetworkCommsDotNet.IPacket)">
            <summary>
            Send the provided packet
            </summary>
            <param name="packet">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.SendStreams(NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper[],System.Double,System.Int64)">
            <summary>
            Connection specific implementation for sending data on this connection type.
            Each StreamSendWrapper[] represents a single expected packet.
            </summary>
            <param name="streamsToSend">The streams which need to be sent</param>
            <param name="maxSendTimePerKB">The maximum time to allow per KB before a write timeout exception.</param>
            <param name="totalBytesToSend">A precalculated sum of streams.Length</param>
            <returns>Should return double[] which represents the milliseconds per byte written for each StreamSendWrapper</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.Dispose">
            <summary>
            Dispose of the connection. Recommended usage is to call CloseConnection instead.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.#ctor">
            <summary>
            Private static constructor which sets the connection defaults
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.MinimumMSPerKBSendTimeout">
            <summary>
            The minimum number of milliseconds to allow per KB before a write timeout may occur. Default is 20.0.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.MaxNumSendTimes">
            <summary>
            The maximum number of writes intervals to maintain. Default is 100.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.MinNumSendsBeforeConnectionSpecificSendTimeout">
            <summary>
            The minimum number of writes before the connection specific write timeouts will be used. Default is 4.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.DefaultMSPerKBSendTimeout">
            <summary>
            The default milliseconds per KB write timeout before connection specific values become available. Default is 1000. See <see cref="P:NetworkCommsDotNet.Connections.Connection.MinNumSendsBeforeConnectionSpecificSendTimeout" />.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.MinSendTimeoutMS">
            <summary>
            The minimum timeout for any sized send in milliseconds. Prevents timeouts when sending less than 1KB. Default is 2000.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.ConnectionKeepAlivePollIntervalSecs">
            <summary>
            The interval between keep alive polls of all connections. Set to int.MaxValue to disable keep alive poll
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.Connection.NumberOfStDeviationsForWriteTimeout">
            <summary>
            The number of standard deviations from the mean to use for write timeouts. Default is 3.0.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.TriggerConnectionKeepAliveThread">
            <summary>
            Starts the connectionKeepAliveWorker thread if it is not already started
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.ConnectionKeepAliveWorker">
            <summary>
            A single static worker thread which keeps connections alive
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.AllConnectionsSendNullPacketKeepAlive(System.Boolean)">
            <summary>
            Polls all existing connections based on ConnectionKeepAlivePollIntervalSecs value. Server side connections are polled
            slightly earlier than client side to help reduce potential congestion.
            </summary>
            <param name="returnImmediately">If true runs as task and returns immediately.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.Connection.Shutdown(System.Int32)">
            <summary>
            Shutdown any static connection components
            </summary>
            <param name="threadShutdownTimeoutMS">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.ConnectionListenerBase">
            <summary>
            A base class that the listener of each connection type inherits from.
            This allows NetworkComms.Net to manage listeners at the general connection level.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.ListenerDefaultSendReceiveOptions">
            <summary>
            The send receive options associated with this listener.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.ConnectionType">
            <summary>
            The connection type that this listener supports.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.ApplicationLayerProtocol">
            <summary>
            The application layer protocol status for this listener.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.IsListening">
            <summary>
            True if this listener is listening.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.IsDiscoverable">
            <summary>
            True if this listener will be advertised via peer discovery
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.ConnectionListenerBase.LocalListenEndPoint">
            <summary>
            The local IPEndPoint that this listener is associated with.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionListenerBase.delegateLocker">
            <summary>
            Thread safety locker which is used when accessing <see cref="F:NetworkCommsDotNet.Connections.ConnectionListenerBase.incomingPacketHandlers" />
            and <see cref="F:NetworkCommsDotNet.Connections.ConnectionListenerBase.incomingPacketUnwrappers" /></summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionListenerBase.incomingPacketUnwrappers">
            <summary>
            By default all incoming objects are handled using ListenerDefaultSendReceiveOptions. Should the user want something else
            those settings are stored here
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionListenerBase.incomingPacketHandlers">
            <summary>
            A listener specific incoming packet handler dictionary. These are called before any global handlers
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.#ctor(NetworkCommsDotNet.Connections.ConnectionType,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus,System.Boolean)">
            <summary>
            Create a new listener instance
            </summary>
            <param name="connectionType">The connection type to listen for.</param>
            <param name="sendReceiveOptions">The send receive options to use for this listener</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.ToString">
            <summary>
            Returns a clean string containing the current listener state
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.StartListening(System.Net.EndPoint,System.Boolean)">
            <summary>
            Start listening for incoming connections.
            </summary>
            <param name="desiredLocalListenEndPoint">Try to start listening on this EndPoint.</param>
            <param name="useRandomPortFailOver">If the request EndPoint is unavailable fail over to a random port.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.StopListening">
            <summary>
            Stop listening for incoming connections.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.AppendIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
            <summary>
            Append a listener specific packet handler using the listener default SendReceiveOptions
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.AppendIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0},NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Append a listener specific packet handler
            </summary>
            <typeparam name="incomingObjectType">The type of incoming object</typeparam>
            <param name="packetTypeStr">The packet type for which this handler will be executed</param>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
            <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided packet type</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.AppendIncomingUnmanagedPacketHandler(NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{System.Byte[]})">
            <summary>
            Append a listener specific unmanaged packet handler
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to be executed when an unmanaged packet is received</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.IncomingPacketHandlerExists(System.String)">
            <summary>
            Returns true if an unmanaged packet handler exists on this listener
            </summary>
            <param name="packetTypeStr">The packet type for which to check incoming packet handlers</param>
            <returns>True if a packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.IncomingUnmanagedPacketHandlerExists">
            <summary>
            Returns true if a listener specific unmanaged packet handler exists, on this listener.
            </summary>
            <returns>True if an unmanaged packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.IncomingPacketHandlerExists(System.String,System.Delegate)">
            <summary>
            Returns true if the provided listener specific packet handler has been added for the provided packet type, on this listener.
            </summary>
            <param name="packetTypeStr">The packet type within which to check packet handlers</param>
            <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
            <returns>True if a listener specific packet handler exists for the provided packetType</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.IncomingUnmanagedPacketHandlerExists(System.Delegate)">
            <summary>
            Returns true if the provided listener specific unmanaged packet handler has been added, on this listener.
            </summary>
            <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
            <returns>True if a listener specific unmanaged packet handler exists</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.RemoveIncomingPacketHandler(System.String,System.Delegate)">
            <summary>
            Remove the provided listener specific packet handler for the specified packet type, on this listener.
            </summary>
            <param name="packetTypeStr">Packet type for which this delegate should be removed</param>
            <param name="packetHandlerDelgatePointer">The delegate to remove</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.RemoveIncomingUnmanagedPacketHandler(System.Delegate)">
            <summary>
            Remove the provided listener specific unmanaged packet handler, on this listener.
            </summary>
            <param name="packetHandlerDelgatePointer">The delegate to remove</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.RemoveIncomingPacketHandler(System.String)">
            <summary>
            Removes all listener specific packet handlers for the provided packet type, on this listener.
            </summary>
            <param name="packetTypeStr">Packet type for which all delegates should be removed</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.RemoveIncomingUnmanagedPacketHandler">
            <summary>
            Removes all unmanaged packet handlers, on this listener.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.RemoveIncomingPacketHandler">
            <summary>
            Removes all packet handlers for all packet types, on this listener.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.ConnectionListenerBase.AddListenerPacketHandlersToConnection(NetworkCommsDotNet.Connections.Connection)">
            <summary>
            Add all listener specific packet handlers to the provided connection
            </summary>
            <param name="connection">The connection to which packet handlers should be added</param>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.ConnectionType">
            <summary>
            The type of <see cref="T:NetworkCommsDotNet.Connections.Connection" />.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionType.Undefined">
            <summary>
            An undefined connection type. This is used as the default value.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionType.TCP">
            <summary>
            A TCP connection type. Used by <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" />.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionType.UDP">
            <summary>
            A UDP connection type. Used by <see cref="T:NetworkCommsDotNet.Connections.UDP.UDPConnection" />.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ConnectionType.Bluetooth">
            <summary>
            A Bluetooth RFCOMM connection. Used by <see cref="!:NetworkCommsDotNet.Connections.Bluetooth.BluetoothConnection" /></summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus">
            <summary>
            The connections application layer protocol status.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Undefined">
            <summary>
            Useful for selecting or searching connections when the ApplicationLayerProtocolStatus
            is unimportant.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Enabled">
            <summary>
            Default value. NetworkComms.Net will use a custom application layer protocol to provide
            useful features such as inline serialisation, transparent packet send and receive,
            connection handshakes and remote information etc. We strongly recommend you enable the
            NetworkComms.Net application layer protocol.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus.Disabled">
            <summary>
            No application layer protocol will be used. TCP packets may fragment or be concatenated
            with other packets. A large number of library features will be unavailable.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.IPConnection">
            <summary>
            IP Connection base class for NetworkComms.Net. This contains the functionality and tools shared by any connections
            that use IP related endPoints such as <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /> and <see cref="T:NetworkCommsDotNet.Connections.UDP.UDPConnection" />.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.IPConnection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Create a new IP connection object
            </summary>
            <param name="connectionInfo">ConnectionInfo corresponding to the new connection</param>
            <param name="defaultSendReceiveOptions">The SendReceiveOptions which should be used as connection defaults</param>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.IPConnection.DOSProtection">
            <summary>
            The NetworkComms.Net DOS protection class. By default DOSProtection is disabled.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.IPConnection.AllowedIncomingIPRanges">
            <summary>
            If set NetworkComms.Net will only accept incoming connections from the provided IP ranges.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.SentPacket">
            <summary>
            A wrapper object for keeping track of sent packets. These are used if a resend is requested due to a checksum validation failure.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.TCP.SSLOptions">
            <summary>
            Contains SSL configuration options
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.SSLEnabled">
            <summary>
            True if SSL has been enabled
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.CertificateName">
            <summary>
            The certificate name
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.Certificate">
            <summary>
            A suitable certificate
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.AllowSelfSignedCertificate">
            <summary>
            If true self signed certificates may be used successfully. CAUTION: Allowing self signed certificates makes it
            significantly easier for a remote peer to impersonate someone.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.RequireMutualAuthentication">
            <summary>
            If true the client must set the correct certificate in its SSLOptions. If false
            all the client requires to successfully connect is the certificate name.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.SSLOptions.Authenticated">
            <summary>
            True once the SSL handshake has been authenticated
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.SSLOptions.#ctor">
            <summary>
            Initialise a new empty instance of SSLOptions, which disables SSL.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.SSLOptions.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean)">
            <summary>
            Initialise a new instance of SSLOptions which enables SSL. If this SSLOptions is used server side any client
            requires either a copy of the provided certificate or the certificate name to successfully connect.
            </summary>
            <param name="certificate">The certificate</param>
            <param name="allowSelfSignedCertificates">If true self signed certificates may be used successfully. CAUTION: Allowing self signed certificates makes it
            significantly easier for a remote peer to impersonate someone.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.SSLOptions.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Boolean)">
            <summary>
            Initialise a new instance of SSLOptions which enables SSL. If requireMutualAuthentication is true, and
            this SSLOptions is used server side, any client must have a copy of the certificate to successfully connect.
            </summary>
            <param name="certificate">The certificate</param>
            <param name="allowSelfSignedCertificates">If true self signed certificates may be used successfully. CAUTION: Allowing self signed certificates makes it
            significantly easier for a remote peer to impersonate someone.</param>
            <param name="requireMutualAuthentication">True if any client must also have a copy of the server certificate</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.SSLOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Initialise a new instance of SSLOptions which enables SSL. Can be successfully used to
            connect to a server with a matching certificateName. Server must not require MutualAuthentication.
            </summary>
            <param name="certificateName">The server certificate name</param>
            <param name="allowSelfSignedCertificates">If true self signed certificates may be used successfully. CAUTION: Allowing self signed certificates makes it
            significantly easier for a remote peer to impersonate someone.</param>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.TCP.TCPConnection">
            <summary>
            A connection object which utilises <see href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</see> to communicate between peers.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.TCP.TCPConnection.tcpClient">
            <summary>
            The TcpClient corresponding to this connection.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.TCP.TCPConnection.connectionStream">
            <summary>
            The networkstream associated with the tcpClient.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.TCPConnection.SSLOptions">
            <summary>
            The SSL options associated with this connection.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.TCP.TCPConnection.dataBuffer">
            <summary>
            The current incoming data buffer
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Net.Sockets.TcpClient,NetworkCommsDotNet.Connections.TCP.SSLOptions)">
            <summary>
            TCP connection constructor
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.EstablishConnectionSpecific">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.ConnectSocket">
            <summary>
            If we were not provided with a tcpClient on creation we need to create one
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.StartIncomingDataListen">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.IncomingTCPPacketHandler(System.IAsyncResult)">
            <summary>
            Asynchronous incoming connection data delegate
            </summary>
            <param name="ar">The call back state object</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.IncomingTCPDataSyncWorker">
            <summary>
            Synchronous incoming connection data worker
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.ConfigureSSLStream">
            <summary>
            Configure the SSL stream from this connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.CertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Callback used to determine if the provided certificate should be accepted
            </summary>
            <param name="sender">
            </param>
            <param name="certificate">
            </param>
            <param name="chain">
            </param>
            <param name="sslPolicyErrors">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.CertificateSelectionCallback(System.Object,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String[])">
            <summary>
            Certificate selection callback
            </summary>
            <param name="sender">
            </param>
            <param name="targetHost">
            </param>
            <param name="localCertificates">
            </param>
            <param name="remoteCertificate">
            </param>
            <param name="acceptableIssuers">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.CloseConnectionSpecific(System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.SendStreams(NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper[],System.Double,System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.TCPConnection.EnableNagleAlgorithmForNewConnections">
            <summary>
            By default usage of <see href="http://en.wikipedia.org/wiki/Nagle's_algorithm">Nagle's algorithm</see> during TCP exchanges is disabled for performance reasons. If you wish it to be used for newly established connections set this property to true.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,System.Boolean)">
            <summary>
            Create a <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /> with the provided connectionInfo. If there is an existing connection that will be returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retrieved using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)" /> and overrides.
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="establishIfRequired">If true will establish the TCP connection with the remote end point before returning</param>
            <returns>Returns a <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
            <summary>
            Create a TCP connection with the provided connectionInfo and sets the connection default SendReceiveOptions. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retrieved using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)" /> and overrides.
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="defaultSendReceiveOptions">The SendReceiveOptions which will be set as this connections defaults</param>
            <param name="establishIfRequired">If true will establish the TCP connection with the remote end point before returning</param>
            <returns>Returns a <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.TCP.SSLOptions,System.Boolean)">
            <summary>
            Create a TCP connection with the provided connectionInfo and sets the connection default SendReceiveOptions. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retrieved using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)" /> and overrides.
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="defaultSendReceiveOptions">The SendReceiveOptions which will be set as this connections defaults</param>
            <param name="sslOptions">SSLOptions to use with this connection</param>
            <param name="establishIfRequired">If true will establish the TCP connection with the remote end point before returning</param>
            <returns>Returns a <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Net.Sockets.TcpClient,System.Boolean,NetworkCommsDotNet.Connections.TCP.SSLOptions)">
            <summary>
            Internal <see cref="T:NetworkCommsDotNet.Connections.TCP.TCPConnection" /> creation which hides the necessary internal calls
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="defaultSendReceiveOptions">Connection default SendReceiveOptions</param>
            <param name="tcpClient">If this is an incoming connection we will already have access to the tcpClient, otherwise use null</param>
            <param name="establishIfRequired">Establish during create if true</param>
            <param name="sslOptions">SSL options that will be used with this connection.</param>
            <returns>An existing connection or a new one</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.StartListening(System.Boolean)">
            <summary>
            Accept new incoming TCP connections on all allowed IP's and Port's
            </summary>
            <param name="useRandomPortFailOver">If true and the default local port is not available will select one at random. If false and a port is unavailable listening will not be enabled on that adaptor</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.StartListening(System.Collections.Generic.List{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Accept new TCP connections on specified list of <see cref="T:System.Net.IPEndPoint" /></summary>
            <param name="localEndPoints">The localEndPoints to listen for connections on</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available on a given IPEndPoint will select one at random. If false and a port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.StartListening(System.Net.IPEndPoint,System.Boolean,System.Boolean)">
            <summary>
            Accept new incoming TCP connections on specified <see cref="T:System.Net.IPEndPoint" /></summary>
            <param name="newLocalEndPoint">The localEndPoint to listen for connections on.</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random. If false and a port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.ExistingLocalListenEndPoints">
            <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding to all current TCP local listeners
            </summary>
            <returns>List of <see cref="T:System.Net.IPEndPoint" /> corresponding to all current TCP local listeners</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.ExistingLocalListenEndPoints(System.Net.IPAddress)">
            <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding to a possible local listeners on the provided <see cref="T:System.Net.IPAddress" />. If not listening on provided <see cref="T:System.Net.IPAddress" /> returns empty list.
            </summary>
            <param name="ipAddress">The <see cref="T:System.Net.IPAddress" /> to match to a possible local listener</param>
            <returns>If listener exists returns <see cref="T:System.Net.IPAddress" /> otherwise null</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnection.Listening">
            <summary>
            Returns true if listening for new TCP connections.
            </summary>
            <returns>True if listening for new TCP connections.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener">
            <summary>
            A TCP connection listener
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.listenerInstance">
            <summary>
            The .net TCPListener class.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.SSLOptions">
            <summary>
            SSL options that are associated with this listener
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.#ctor(NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus,System.Boolean)">
            <summary>
            Create a new instance of a TCP listener
            </summary>
            <param name="sendReceiveOptions">The SendReceiveOptions to use with incoming data on this listener</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.#ctor(NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus,NetworkCommsDotNet.Connections.TCP.SSLOptions,System.Boolean)">
            <summary>
            Create a new instance of a TCP listener
            </summary>
            <param name="sendReceiveOptions">The SendReceiveOptions to use with incoming data on this listener</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
            <param name="sslOptions">The SSLOptions to use with this listener</param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.StartListening(System.Net.EndPoint,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.StopListening">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.TCP.TCPConnectionListener.TCPConnectionReceivedAsync(System.IAsyncResult)">
            <summary>
            Async method for handling up new incoming TCP connections
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.UDP.UdpClientWrapper">
            <summary>
            Internal wrapper around a udpClient object so that we can easily manage usage.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UdpClientWrapper.SIO_UDP_CONNRESET">
            <summary>
            IOControl value used to ignore ICMP destination unreachable packets which result in the socket closing
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.UDP.UDPConnection">
            <summary>
            A connection object which utilises <see href="http://en.wikipedia.org/wiki/User_Datagram_Protocol">UDP</see> to communicate between peers.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.UDP.UDPConnection.ConnectionUDPOptions">
            <summary>
            Options associated with this UDPConnection
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UDPConnection.isIsolatedUDPConnection">
            <summary>
            An isolated UDP connection will only accept incoming packets coming from a specific RemoteEndPoint.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.UDP.UDPOptions,System.Boolean,NetworkCommsDotNet.Connections.UDP.UDPConnection)">
            <summary>
            Internal constructor for UDP connections
            </summary>
            <param name="connectionInfo">
            </param>
            <param name="defaultSendReceiveOptions">
            </param>
            <param name="level">
            </param>
            <param name="listenForIncomingPackets">
            </param>
            <param name="existingConnection">
            </param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.EstablishConnectionSpecific">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.CloseConnectionSpecific(System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendPacketSpecific``1(NetworkCommsDotNet.IPacket,System.Net.IPEndPoint)">
            <summary>
            Send a packet to the specified ipEndPoint. This feature is unique to UDP because of its connectionless structure.
            </summary>
            <param name="packet">Packet to send</param>
            <param name="ipEndPoint">The target ipEndPoint</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendStreams(NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper[],System.Double,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.StartIncomingDataListen">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.IncomingUDPPacketHandler(System.IAsyncResult)">
            <summary>
            Incoming data listen async method
            </summary>
            <param name="ar">Call back state data</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.IncomingUDPPacketWorker">
            <summary>
            Incoming data listen sync method
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.UDP.UDPConnection.IgnoreICMPDestinationUnreachable">
            <summary>
            By default a UDP datagram sent to an unreachable destination will result in an ICMP Destination Unreachable
            packet. This can result in a SocketException on the local end. To avoid this behaviour these ICMP packets
            are ignored by default, i.e. this value is set to true. Setting this value to false could cause new UDP
            connections to close, possibly unexpectedly.
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.UDP.UDPConnection.DefaultUDPOptions">
            <summary>
            The default UDPOptions to use where none are otherwise specified.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UDPConnection.udpRogueSenders">
            <summary>
            The rogue UDP connection is used for sending ONLY if no available locally bound client is available.
            First key is address family of rogue sender, second key is value of ApplicationLayerProtocolEnabled.
            Third key is local IPEndPoint of the rouge sender
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UDPConnection.maximumSingleDatagramSizeBytes">
            <summary>
            The maximum datagram size limit for UDP
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.#ctor">
            <summary>
            Static constructor which creates the rogue sender
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.Connections.UDP.UDPOptions,System.Boolean,System.Boolean)">
            <summary>
            Create a UDP connection with the provided connectionInfo. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retrieved using
            <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)" /> and overrides.
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="level">The UDP level to use for this connection</param>
            <param name="listenForReturnPackets">If set to true will ensure that reply packets are handled</param>
            <param name="establishIfRequired">Will establish the connection, triggering connection establish delegates if a
            new connection is returned</param>
            <returns>Returns a <see cref="T:NetworkCommsDotNet.Connections.UDP.UDPConnection" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.Connections.UDP.UDPOptions,NetworkCommsDotNet.SendReceiveOptions,System.Boolean,System.Boolean)">
            <summary>
            Create a UDP connection with the provided connectionInfo and and sets the connection default SendReceiveOptions.
            If there is an existing connection that is returned instead. If a new connection is created it will be registered
            with NetworkComms and can be retrieved using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)" />.
            </summary>
            <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
            <param name="defaultSendReceiveOptions">The SendReceiveOptions to use as defaults for this connection</param>
            <param name="level">The UDP options to use for this connection</param>
            <param name="listenForReturnPackets">If set to true will ensure that reply packets can be received</param>
            <param name="establishIfRequired">Will establish the connection, triggering connection establish delegates if a
            new connection is returned</param>
            <returns>Returns a <see cref="T:NetworkCommsDotNet.Connections.UDP.UDPConnection" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.Connections.UDP.UDPOptions,NetworkCommsDotNet.SendReceiveOptions,System.Boolean,NetworkCommsDotNet.Connections.UDP.UDPConnection,NetworkCommsDotNet.Connections.UDP.HandshakeUDPDatagram,System.Boolean)">
            <summary>
            Internal UDP creation method that performs the necessary tasks
            </summary>
            <param name="connectionInfo">
            </param>
            <param name="defaultSendReceiveOptions">
            </param>
            <param name="level">
            </param>
            <param name="listenForReturnPackets">
            </param>
            <param name="existingListenerConnection">
            </param>
            <param name="possibleHandshakeUDPDatagram">
            </param>
            <param name="establishIfRequired">Will establish the connection, triggering connection establish delegates if a new
            connection is returned</param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendObject(System.String,System.Object,System.String,System.Int32)">
            <summary>
            Sends a single object to the provided IPAddress and Port. NOTE: Any possible reply will be ignored unless listening
            for incoming UDP packets.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send.</param>
            <param name="ipAddress">The destination IP address. Supports multicast addresses such as 192.168.0.255 etc.</param>
            <param name="port">The destination port.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendObject(System.String,System.Object,System.Net.IPEndPoint)">
            <summary>
            Sends a single object to the provided endPoint. NOTE: Any possible reply will be ignored unless listening for incoming UDP packets.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send</param>
            <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendObject(System.String,System.Object,System.Net.IPEndPoint,NetworkCommsDotNet.SendReceiveOptions)">
            <summary>
            Sends a single object to the provided endPoint. NOTE: Any possible reply will be ignored unless listening for incoming UDP packets.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send</param>
            <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
            <param name="sendReceiveOptions">The sendReceiveOptions to use for this send</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendObject``1(System.String,``0,System.Net.IPEndPoint,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Sends a single object to the provided endPoint. NOTE: Any possible reply will be ignored unless listening for incoming UDP packets.
            </summary>
            <param name="sendingPacketType">The sending packet type</param>
            <param name="objectToSend">The object to send</param>
            <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
            <param name="sendReceiveOptions">The sendReceiveOptions to use for this send</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you use the NetworkComms.Net application layer protocol.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.SendObject``1(NetworkCommsDotNet.IPacket,System.Net.IPEndPoint,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus)">
            <summary>
            Sends a <see cref="T:NetworkCommsDotNet.Packet" /> to the provided endPoint. Offers more performance if an identical packet is being sent to multiple peers.
            NOTE: Any possible reply will be ignored unless listening for incoming UDP packets.
            </summary>
            <typeparam name="packetPayloadObjectType">The type of object encapsulated by the provided packet</typeparam>
            <param name="packetToSend">The packet to send</param>
            <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
            <param name="sendReceiveOptions">The sendReceiveOptions to use for this send</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you use the NetworkComms.Net application layer protocol.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.AnyRemoteIPAddress(System.Net.Sockets.AddressFamily)">
            <summary>
            Provides an IP address that matches all IPAddresses of the provided targetAddressFamily
            </summary>
            <param name="targetAddressFamily">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.StartListening(System.Boolean)">
            <summary>
            Listen for incoming UDP packets on all allowed local IP's on default port.
            </summary>
            <param name="useRandomPortFailOver">If true and the default local port is not available will select one at random. If false
            and a port is unavailable listening will not be enabled on that adaptor unless NetworkComms.ListenOnAllAllowedInterfaces is
            false in which case a <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /> will be thrown instead.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.StartListening(System.Collections.Generic.List{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Listen for incoming UDP packets on provided list of <see cref="T:System.Net.IPEndPoint" />.
            </summary>
            <param name="localEndPoints">The localEndPoints to listen for packets on.</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random. If false
            and a port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.StartListening(System.Net.IPEndPoint,System.Boolean,System.Boolean)">
            <summary>
            Listen for incoming UDP packets on specified <see cref="T:System.Net.IPEndPoint" />.
            </summary>
            <param name="newLocalEndPoint">The localEndPoint to listen for packets on</param>
            <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random.
            If false and a port is unavailable will throw <see cref="T:NetworkCommsDotNet.CommsSetupShutdownException" /></param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.ExistingLocalListenEndPoints">
            <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding with all UDP local listeners
            </summary>
            <returns>List of <see cref="T:System.Net.IPEndPoint" /> corresponding with all UDP local listeners</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.ExistingLocalListenEndPoints(System.Net.IPAddress)">
            <summary>
            Returns an <see cref="T:System.Net.IPEndPoint" /> corresponding to a possible local listener on the provided <see cref="T:System.Net.IPAddress" />.
            If not listening on provided <see cref="T:System.Net.IPAddress" /> returns null.
            </summary>
            <param name="ipAddress">The <see cref="T:System.Net.IPAddress" /> to match to a possible local listener</param>
            <returns>If listener exists returns <see cref="T:System.Net.IPAddress" /> otherwise null</returns>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnection.Listening">
            <summary>
            Returns true if listening for new UDP connections.
            </summary>
            <returns>True if listening for new UDP connections.</returns>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener">
            <summary>
            A UDP connection listener
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener.UDPOptions">
            <summary>
            The UDPOptions to be used for this listener
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener.UDPConnection">
            <summary>
            The UDP listener is a UDP connection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener.#ctor(NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.Connections.ApplicationLayerProtocolStatus,NetworkCommsDotNet.Connections.UDP.UDPOptions,System.Boolean)">
            <summary>
            Create a new instance of a UDP listener
            </summary>
            <param name="sendReceiveOptions">The SendReceiveOptions to use with incoming data on this listener</param>
            <param name="applicationLayerProtocol">If enabled NetworkComms.Net uses a custom
            application layer protocol to provide useful features such as inline serialisation,
            transparent packet transmission, remote peer handshake and information etc. We strongly
            recommend you enable the NetworkComms.Net application layer protocol.</param>
            <param name="udpOptions">The UDPOptions to use with this listener</param>
            <param name="allowDiscoverable">Determines if the newly created <see cref="T:NetworkCommsDotNet.Connections.ConnectionListenerBase" /> will be discoverable if <see cref="T:NetworkCommsDotNet.Tools.PeerDiscovery" /> is enabled.</param>
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener.StartListening(System.Net.EndPoint,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.Connections.UDP.UDPConnectionListener.StopListening">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.Connections.UDP.UDPOptions">
            <summary>
            A <see cref="T:NetworkCommsDotNet.Connections.UDP.UDPConnection" /> could support different combinations of features. i.e. From the most basic (None) which
            sends connectionless UDP packets up to an emulated TCP. Future versions of NetworkCommsDotNet will support an ever
            increasing number of UDP features. This flag enum is used to specify which of the available features should be used.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UDPOptions.None">
            <summary>
            The most basic UDP option. All UDP packets are sent connectionless with no error handling, sequencing or duplication prevention.
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.Connections.UDP.UDPOptions.Handshake">
            <summary>
            Performs a connection handshake, which ensures the remote end is alive at the time of the connection
            establish. Also exchanges network identifier and possible remote listening port.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.Connections.UDP.HandshakeUDPDatagram">
            <summary>
            A small wrapper class which allows an initialising UDP datagram
            to be handled within a connection instantiation if required.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.BinaryFormaterSerializer">
            <summary>
            DataSerializer that uses .Net <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> to perform <see cref="T:System.Object" /> serialization
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.BinaryFormaterSerializer.Instance">
            <summary>
            Instance singleton used to access serializer instance.  Use instead <see cref="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataSerializer``1" /></summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.BinaryFormaterSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.BinaryFormaterSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DataPadder">
            <summary>
                <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> which pads data section of a packet using to a fixed size
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DataPadder.DataPaddingType">
            <summary>
            The type of data padding to use
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.DPSBase.DataPadder.DataPaddingType.Zero">
            <summary>
            Pads with all zeros (fastest)
            </summary>
        </member>
        <member name="F:NetworkCommsDotNet.DPSBase.DataPadder.DataPaddingType.Random">
            <summary>
            Pads with cryptographically secure random numbers (slower but potentially slightly more secure)
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataPadder.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataPadder.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataPadder.AddPaddingOptions(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,NetworkCommsDotNet.DPSBase.DataPadder.DataPaddingType,System.Boolean)">
            <summary>
            Adds the necessary options for padding
            </summary>
            <param name="options">The Dictionary to add the options to</param>
            <param name="paddedSize">The size that the data section of the packet should be padded to. If throwExceptionOnNotEnoughPadding is true this must be at least the original data packet size plus four bytes</param>
            <param name="paddingType">Determines whether the data is padded with zeros or random data</param>
            <param name="throwExceptionOnNotEnoughPadding">If true an <see cref="T:System.ArgumentException" /> is thrown if paddingSize is smaller than the original data packet size plus four bytes</param>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DataProcessor">
            <summary>
            Provides methods that process data in a <see cref="T:System.IO.Stream" /> into another <see cref="T:System.IO.Stream" />.  Can be used to provide features such as data compression or encryption
            </summary>
            <example>
                <code source="..\NetworkCommsDotNet\DPSBase\RijndaelPSKEncrypter.cs" lang="cs" title="Implementation Example" />
            </example>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataProcessor.GetInstance``1">
            <summary>
            Helper function to allow a <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to be implemented as a singleton.  Returns the singleton instance generated by the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to retrieve from the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></typeparam>
            <returns>The singleton instance generated by the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></returns>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.DataProcessor.Identifier">
            <summary>
            Returns a unique identifier for the compressor type. Used in automatic serialization/compression detection
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.DataProcessor.IsSecurityCritical">
            <summary>
            Returns a boolian stating whether this data processor is security critical
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataProcessor.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <summary>
            Processes data held in a stream and outputs it to another stream
            </summary>
            <param name="inStream">An input stream containing data to be processed</param>
            <param name="outStream">An output stream to which the processed data is written</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <param name="writtenBytes">The size of the data written to the output stream</param>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataProcessor.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <summary>
            Processes data, in reverse, that is held in a stream and outputs it to another stream
            </summary>
            <param name="inStream">An input stream containing data to be processed</param>
            <param name="outStream">An output stream to which the processed data is written</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <param name="writtenBytes">The size of the data written to the output stream</param>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DataSerializer">
            <summary>
            Provides methods that convert an <see cref="T:System.Object" /> into a <see cref="T:System.Byte" />[]
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.GetInstance``1">
            <summary>
            Helper function to allow a <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to be implemented as a singleton.  Returns the singleton instance generated by the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to retrieve from the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></typeparam>
            <returns>The singleton instance generated by the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.SerialiseDataObject``1(``0)">
            <summary>
            Converts objectToSerialize to an array of bytes. Uses no data processors.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="objectToSerialise">Object to serialize</param>
            <returns>Serialized array of bytes</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.SerialiseDataObject``1(``0,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts objectToSerialize to an array of bytes using the data processors and options provided.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="objectToSerialise">Object to serialize</param>
            <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in index order i.e. low index to high</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <returns>Serialized array of bytes</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.DeserialiseDataObject``1(System.Byte[])">
            <summary>
            Converts array of bytes previously serialized to an object of provided type. Assumes no data processors.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.DeserialiseDataObject``1(System.IO.MemoryStream)">
            <summary>
            Converts a memory stream containing bytes previously serialized to an object of provided type. Assumes no data processors.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="receivedObjectStream">Byte array containing serialized and compressed object</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.DeserialiseDataObject``1(System.Byte[],System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts bytes previously serialized and processed using data processors to an object of provided type
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
            <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in reverse order i.e. high index to low</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.DeserialiseDataObject``1(System.IO.MemoryStream,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts a memory stream containing bytes previously serialized and processed using data processors to an object of provided type
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="receivedObjectStream">Byte array containing serialized and compressed object</param>
            <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in reverse order i.e. high index to low</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.DataSerializer.Identifier">
            <summary>
            Returns a unique identifier for the serializer type.  Used in automatic serialization/compression detection
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serialises an object to a stream using any relevant options provided
            </summary>
            <param name="ouputStream">The stream to serialise to</param>
            <param name="objectToSerialise">The object to serialise</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserialises the data in a stream to an object of the specified type using any relevant provided options
            </summary>
            <param name="inputStream">The stream containing the serialised object</param>
            <param name="resultType">The return object Type</param>
            <param name="options">Options dictionary for serialisation/data processing</param>
            <returns>The deserialised object</returns>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.ArraySerializer">
            <summary>
            Class that provides optimised method for serializing arrays of primitive data types.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.ArraySerializer.SerialiseArrayObject(System.Object,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes objectToSerialize to a byte array using compression provided by compressor if T is an array of primitives.  Otherwise returns default value for T.  Override
            to serialize other types
            </summary>
            <param name="objectToSerialise">Object to serialize</param>
            <param name="dataProcessors">The compression provider to use</param>
            <param name="options">Options to be used during serialization and processing of data</param>
            <returns>The serialized and compressed bytes of objectToSerialize</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.ArraySerializer.DeserialiseArrayObject(System.IO.MemoryStream,System.Type,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes data object held as compressed bytes in receivedObjectBytes using compressor if desired type is an array of primitives
            </summary>
            <param name="inputStream">Byte array containing serialized and compressed object</param>
            <param name="dataProcessors">Compression provider to use</param>
            <param name="objType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> to be returned</param>
            <param name="options">Options to be used during deserialization and processing of data</param>
            <returns>The deserialized object if it is an array, otherwise null</returns>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.StreamSendWrapperSerializer">
            <summary>
            Class that provides optimised method for serializing arrays of primitive data types.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.StreamSendWrapperSerializer.SerialiseStreamSendWrapper(NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes StreamSendWrapper to a StreamSendWrapper possibly using provided data processors.  If there are no data processor streamSendWrapperToSerialize will be returned.
            </summary>
            <param name="streamSendWrapperToSerialize">StreamSendWrapper to serialize</param>
            <param name="dataProcessors">The compression provider to use</param>
            <param name="options">Options to be used during serialization and processing of data</param>
            <returns>The serialized and compressed bytes of objectToSerialize</returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.StreamSendWrapperSerializer.DeserialiseStreamSendWrapper(System.Byte[],System.Type,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes data object held as compressed bytes in receivedObjectBytes using compressor if desired type is a <see cref="T:NetworkCommsDotNet.Tools.StreamTools.StreamSendWrapper" /></summary>
            <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
            <param name="dataProcessors">Compression provider to use</param>
            <param name="objType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> to be returned</param>
            <param name="options">Options to be used during deserialization and processing of data</param>
            <returns>The deserialized object if it is an array, otherwise null</returns>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DataSerializerProcessorAttribute">
            <summary>
            Custom attribute used to keep track of serializers and processors
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.DataSerializerProcessorAttribute.Identifier">
            <summary>
            A byte identifier, unique amongst all serialisers and data processors.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DataSerializerProcessorAttribute.#ctor(System.Byte)">
            <summary>
            Create a new instance of this attribute
            </summary>
            <param name="identifier">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.SecurityCriticalDataProcessorAttribute">
            <summary>
            Custom attribute used to label data processors as security critical or not
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.SecurityCriticalDataProcessorAttribute.IsSecurityCritical">
            <summary>
            A booling defining if this data processor is security critical
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.SecurityCriticalDataProcessorAttribute.#ctor(System.Boolean)">
            <summary>
            Create a new instance of this attribute
            </summary>
            <param name="isSecurityCritical">
            </param>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.DPSManager">
            <summary>
            Automatically detects and manages the use of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s.
            Any <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> or <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> in an assembly located in the working
            directory (including subdirectories) will be automatically detected.
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataSerializer``1">
            <summary>
            Retrieves the singleton instance of the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> with <see cref="T:System.Type" /> T
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to retrieve </typeparam>
            <returns>The retrieved singleton instance of the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataSerializer(System.Byte)">
            <summary>
            Retrieves the singleton instance of the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> corresponding to a given id
            </summary>
            <param name="Id">The identifier corresponding to the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /></param>
            <returns>The retrieved singleton instance of the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataProcessor``1">
            <summary>
            Retrieves the singleton instance of the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> with <see cref="T:System.Type" /> T
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to retrieve </typeparam>
            <returns>The retrieved singleton instance of the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataProcessor(System.Byte)">
            <summary>
            Retrieves the singleton instance of the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> corresponding to a given id
            </summary>
            <param name="Id">The identifier corresponding to the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /></param>
            <returns>The retrieved singleton instance of the desired <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /></returns>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.AddDataProcessor(NetworkCommsDotNet.DPSBase.DataProcessor)">
            <summary>
            Allows the addition of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s which are not auto detected.  Use only if the assembly
            in which the <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> is defined is not in the working directory (including subfolders)
            or if automatic detection is not supported on your platform.
            </summary>
            <param name="dataProcessor">The <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> to make the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /> aware of</param>
            <exception cref="T:System.ArgumentException">Thrown if A different <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> of the same
            <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></exception>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.AddDataSerializer(NetworkCommsDotNet.DPSBase.DataSerializer)">
            <summary>
            Allows the addition of <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" />s which are not auto detected.  Use only if the assembly
            in which the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> is defined is not in the working directory (including subfolders)
            or if automatic detection is not supported on your platform
            </summary>
            <param name="dataSerializer">The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to make the see <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /> aware of</param>
            <exception cref="T:System.ArgumentException">Thrown if A different <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> of the same
            <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:NetworkCommsDotNet.DPSBase.DPSManager" /></exception>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.CreateSerializerDataProcessorIdentifier(NetworkCommsDotNet.DPSBase.DataSerializer,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor})">
            <summary>
            Generates an <see cref="T:System.Int64" /> describing a <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and a set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s
            </summary>
            <param name="serializer">The <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> to be used</param>
            <param name="dataProcessors">A <see cref="T:System.Collections.Generic.List`1" /> to be used.  The order of this </param>
            <returns>A <see cref="T:System.Int64" /> describing the arguments</returns>
            <exception cref="T:System.ArgumentException">Thrown is more than 7 <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" />s are used</exception>
            <remarks>This method is used to specify succinctly the serialization method and any data processing that will be
            used when transmitting data using NetworkCommsDotNet</remarks>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.DPSManager.GetSerializerDataProcessorsFromIdentifier(System.Int64,NetworkCommsDotNet.DPSBase.DataSerializer@,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor}@)">
            <summary>
            Takes an identifier generated using <see cref="M:NetworkCommsDotNet.DPSBase.DPSManager.CreateSerializerDataProcessorIdentifier(NetworkCommsDotNet.DPSBase.DataSerializer,System.Collections.Generic.List{NetworkCommsDotNet.DPSBase.DataProcessor})" /> and returns
            the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s used to generate the identifier
            </summary>
            <param name="id">The <see cref="T:System.Int64" /> describing the <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /> and a set of <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
            <param name="serializer">The resultant <see cref="T:NetworkCommsDotNet.DPSBase.DataSerializer" /></param>
            <param name="dataProcessors">A List of the resultant <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" />s</param>
            <remarks>This method is used to extract the serialization method and any data processing that needs to
            be used when transmitting data using NetworkCommsDotNet</remarks>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.IExplicitlySerialize">
            <summary>
            Interface defining serialize/deserialize methods
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.IExplicitlySerialize.Serialize(System.IO.Stream)">
            <summary>
            Serializes the current <see cref="T:NetworkCommsDotNet.DPSBase.IExplicitlySerialize" /> object to the provided <see cref="T:System.IO.Stream" /></summary>
            <param name="outputStream">The stream to serialize to</param>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.IExplicitlySerialize.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes from a <see cref="T:System.IO.Stream" /> to the current <see cref="T:NetworkCommsDotNet.DPSBase.IExplicitlySerialize" /> object
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream" /> to deserialize from</param>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.ExplicitSerializer">
            <summary>
            Serializer that will only serialize objects implementing the <see cref="T:NetworkCommsDotNet.DPSBase.IExplicitlySerialize" /> interface
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.ExplicitSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.ExplicitSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.NullSerializer">
            <summary>
            Use only when serializing only primitive arrays. Will throw an exception otherwise
            </summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.NullSerializer.Instance">
            <summary>
            Instance singleton used to access serializer instance.  Use instead <see cref="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataSerializer``1" /></summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.NullSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.NullSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.RijndaelPSKEncrypter">
            <summary>
                <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> which encrypts/decrypts data using the Rijndael algorithm and a pre-shared password
            </summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.RijndaelPSKEncrypter.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.RijndaelPSKEncrypter.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.RijndaelPSKEncrypter.AddPasswordToOptions(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Adds a password, using the correct key, to a Dictionary
            </summary>
            <param name="options">The Dictionary to add the option to</param>
            <param name="password">The password</param>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.RijndaelPSKEncrypter.Dispose">
            <summary>
            Dispose of all resources.
            </summary>
        </member>
        <member name="T:NetworkCommsDotNet.DPSBase.SevenZipLZMACompressor.LZMACompressor">
            <summary>
            Compressor utilizing LZMA algorithm from <see href="http://www.7-zip.org/">7zip</see></summary>
        </member>
        <member name="P:NetworkCommsDotNet.DPSBase.SevenZipLZMACompressor.LZMACompressor.Instance">
            <summary>
            Instance singleton used to access <see cref="T:NetworkCommsDotNet.DPSBase.DataProcessor" /> instance.  Obsolete, use instead <see cref="M:NetworkCommsDotNet.DPSBase.DPSManager.GetDataProcessor``1" /></summary>
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.SevenZipLZMACompressor.LZMACompressor.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:NetworkCommsDotNet.DPSBase.SevenZipLZMACompressor.LZMACompressor.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
            <inheritdoc />
        </member>
        <member name="T:LZMA.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="T:LZMA.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.MultiThread">
            <summary>
            Specifies multithread mode.
            </summary>
        </member>
        <member name="F:LZMA.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
    </members>
</doc>
